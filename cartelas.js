// CARTELAS.JS - VERS√ÉO SIMPLES E FUNCIONAL
console.log('üé´ Carregando cartelas.js...');

// Vari√°veis globais
let cartelaAtual = null;
let carrinho = [];
let configuracoes = {
    numeroInicial: 1,
    numeroFinal: 75,
    precoCartela: 5.00
};

// Recuperar carrinho do localStorage
function carregarCarrinhoDoStorage() {
    try {
        const carrinhoStorage = localStorage.getItem('bingo-carrinho');
        if (carrinhoStorage) {
            const carrinhoRecuperado = JSON.parse(carrinhoStorage);
            if (Array.isArray(carrinhoRecuperado)) {
                carrinho = carrinhoRecuperado;
                window.carrinho = carrinho;
                console.log('üîÑ Carrinho recuperado do localStorage:', carrinho);
                return true;
            }
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao recuperar carrinho do localStorage:', error);
    }
    return false;
}

// Vari√°veis Firebase
let firebaseService = null;

// Fun√ß√£o principal para gerar cartela (renomeada para evitar conflito)
function gerarCartelaCompleta() {
    console.log('üé≤ Gerando nova cartela completa...');
    
    try {
        // Gerar n√∫meros aleat√≥rios
        const numeros = [];
        const numeroInicial = 1;
        const numeroFinal = 75;
        
        // Criar array de n√∫meros dispon√≠veis
        const disponiveis = [];
        for (let i = numeroInicial; i <= numeroFinal; i++) {
            disponiveis.push(i);
        }
        
        // Escolher 24 n√∫meros aleat√≥rios (padr√£o do BINGO sem o espa√ßo livre central)
        for (let i = 0; i < 24; i++) {
            const indice = Math.floor(Math.random() * disponiveis.length);
            numeros.push(disponiveis.splice(indice, 1)[0]);
        }
        
        // Ordenar n√∫meros
        numeros.sort((a, b) => a - b);
        
        // Criar objeto da cartela
        cartelaAtual = {
            id: `CART-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
            numeros: numeros,
            preco: 5.00,
            status: 'preview'
        };
        
        console.log('üìã Cartela gerada:', cartelaAtual);
        
        // Mostrar cartela na tela
        mostrarCartela(cartelaAtual);
        
        console.log('‚úÖ Cartela exibida com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro ao gerar cartela:', error);
        alert('Erro ao gerar cartela: ' + error.message);
    }
}

// Inicializar Firebase
async function inicializarFirebase() {
    try {
        console.log('üî• Inicializando Firebase...');
        
        // Verificar se firebase est√° dispon√≠vel
        if (typeof firebase === 'undefined') {
            console.warn('‚ö†Ô∏è Firebase SDK n√£o dispon√≠vel ainda');
            return;
        }
        
        // Verificar se a fun√ß√£o de inicializa√ß√£o unificada existe
        if (typeof initializeFirebaseUnified === 'function') {
            await initializeFirebaseUnified();
            console.log('‚úÖ Firebase inicializado via fun√ß√£o unificada');
        } else if (typeof FirebaseService !== 'undefined') {
            firebaseService = new FirebaseService();
            console.log('‚úÖ Firebase Service criado');
        } else {
            console.warn('‚ö†Ô∏è Nenhuma fun√ß√£o de inicializa√ß√£o encontrada');
        }
        
        // Verificar se FirebaseDB est√° dispon√≠vel
        if (window.FirebaseDB) {
            console.log('‚úÖ FirebaseDB dispon√≠vel e pronto para uso');
        } else {
            console.warn('‚ö†Ô∏è FirebaseDB n√£o foi inicializado');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao inicializar Firebase:', error);
    }
}

// Fun√ß√£o para verificar acesso admin (corrige erro do console)
function verificarAcessoAdmin() {
    console.log('üîê Redirecionando para √°rea administrativa...');
    window.location.href = 'admin.html';
}

// Expor vari√°veis e fun√ß√µes globais para sincroniza√ß√£o
window.carrinho = carrinho;
window.atualizarCarrinho = atualizarCarrinho;
window.verificarAcessoAdmin = verificarAcessoAdmin;

// Aguardar DOM carregar
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ DOM carregado, aguardando Firebase...');
    
    // Carregar carrinho do localStorage
    carregarCarrinhoDoStorage();
    
    // VALIDA√á√ÉO CR√çTICA: Aguardar Firebase estar dispon√≠vel
    console.log('‚è≥ Aguardando Firebase estar dispon√≠vel...');
    let tentativas = 0;
    const maxTentativas = 100; // 10 segundos m√°ximo
    
    while ((!window.FirebaseDB || typeof firebase === 'undefined' || !firebase.firestore) && tentativas < maxTentativas) {
        await new Promise(resolve => setTimeout(resolve, 100));
        tentativas++;
        
        if (tentativas % 10 === 0) {
            console.log(`‚è≥ Aguardando Firebase... tentativa ${tentativas}/${maxTentativas}`);
        }
    }
    
    if (window.FirebaseDB && typeof firebase !== 'undefined' && firebase.firestore) {
        console.log(`‚úÖ Firebase dispon√≠vel ap√≥s ${tentativas * 100}ms`);
        console.log('üî• Firebase services dispon√≠veis:', {
            app: !!firebase.app,
            firestore: !!firebase.firestore,
            FirebaseDB: !!window.FirebaseDB
        });
    } else {
        console.error('‚ùå ERRO CR√çTICO: Firebase n√£o dispon√≠vel ap√≥s timeout!');
        console.error('üîç Estado do Firebase:', {
            firebase: typeof firebase,
            FirebaseDB: !!window.FirebaseDB,
            firestore: typeof firebase !== 'undefined' ? !!firebase.firestore : false
        });
        
        // Mostrar alerta cr√≠tico para usu√°rio
        setTimeout(() => {
            alert('‚ùå SISTEMA INDISPON√çVEL\n\nO sistema de banco de dados n√£o est√° carregado.\nRecarregue a p√°gina e aguarde at√© que tudo esteja funcionando antes de usar.');
        }, 1000);
    }
    
    setTimeout(function() {
        configurarBotaoGerar();
        configurarOutrosBotoes();
        atualizarCarrinho();
        
        // Sincronizar com interface se h√° itens no carrinho simples
        sincronizarCarrinhoInicial();
        
        setTimeout(inicializarFirebase, 500);
        
        // Verificar status do sistema ap√≥s inicializa√ß√£o
        setTimeout(() => {
            verificarStatusSistema();
        }, 2000);
        
        // Iniciar limpeza peri√≥dica de reservas (apenas se Firebase dispon√≠vel)
        if (window.FirebaseDB && typeof firebase !== 'undefined' && firebase.firestore) {
            setTimeout(() => {
                limparReservasExpiradas();
                setInterval(limparReservasExpiradas, 5 * 60 * 1000); // A cada 5 minutos
            }, 2000);
        }
    }, 100);
});

// Sincronizar carrinho inicial com interface
function sincronizarCarrinhoInicial() {
    const itensSimples = document.querySelectorAll('#carrinho-lista .item-carrinho');
    if (itensSimples.length > 0 && carrinho.length === 0) {
        console.log('üîÑ Sincronizando carrinho inicial...');
        
        // Criar cartelas fict√≠cias para cada item da interface
        for (let i = 0; i < itensSimples.length; i++) {
            // Gerar 24 n√∫meros √∫nicos de 1 a 75
            const numerosUnicos = [];
            const disponiveis = Array.from({length: 75}, (_, idx) => idx + 1);
            for (let j = 0; j < 24; j++) {
                const indice = Math.floor(Math.random() * disponiveis.length);
                numerosUnicos.push(disponiveis.splice(indice, 1)[0]);
            }
            
            const cartela = {
                id: `CART-SYNC-${Date.now()}-${i}`,
                numeros: numerosUnicos.sort((a, b) => a - b),
                preco: 5.00,
                status: 'no-carrinho'
            };
            carrinho.push(cartela);
        }
        
        console.log(`‚úÖ ${carrinho.length} cartela(s) sincronizada(s)`);
    }
}

// Fun√ß√£o dedicada para configurar o bot√£o gerar
function configurarBotaoGerar() {
    console.log('üéØ Configurando bot√£o gerar...');
    
    const btnGerar = document.getElementById('gerar-preview');
    
    if (!btnGerar) {
        console.error('‚ùå Bot√£o gerar-preview n√£o encontrado no DOM');
        return;
    }
    
    console.log('‚úÖ Bot√£o encontrado:', btnGerar);
    
    // Verificar se Firebase est√° dispon√≠vel antes de configurar
    if (!window.FirebaseDB || typeof firebase === 'undefined' || !firebase.firestore) {
        console.warn('‚ö†Ô∏è Firebase n√£o dispon√≠vel - bot√£o ser√° desabilitado');
        btnGerar.disabled = true;
        btnGerar.textContent = '‚ùå Sistema Indispon√≠vel (Firebase n√£o carregado)';
        btnGerar.title = 'O Firebase n√£o est√° carregado. Recarregue a p√°gina.';
        return;
    }
    
    // Configura√ß√£o mais direta - apenas onclick
    btnGerar.onclick = async function() {
        console.log('üñ±Ô∏è CLIQUE DETECTADO!');
        
        // Verifica√ß√£o cr√≠tica do Firebase no momento do clique
        if (!window.FirebaseDB || typeof firebase === 'undefined' || !firebase.firestore) {
            console.error('‚ùå Firebase n√£o dispon√≠vel, tentando inicializar...');
            
            // Tentar inicializar Firebase primeiro
            try {
                await inicializarFirebase();
                
                // Aguardar um pouco e tentar novamente
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                if (!window.FirebaseDB || typeof firebase === 'undefined' || !firebase.firestore) {
                    alert('‚ùå Sistema indispon√≠vel: Firebase n√£o est√° funcionando. Por favor, recarregue a p√°gina e aguarde o carregamento completo.');
                    return;
                }
            } catch (error) {
                console.error('‚ùå Falha ao inicializar Firebase:', error);
                alert('‚ùå Erro de sistema: ' + error.message + '\nRecarregue a p√°gina.');
                return;
            }
        }
        
        // Verificar se a fun√ß√£o corrigida est√° dispon√≠vel
        if (typeof gerarCartelaCorrigida === 'function') {
            console.log('‚úÖ Usando gerarCartelaCorrigida');
            await gerarCartelaCorrigida();
        } else {
            console.error('‚ùå gerarCartelaCorrigida n√£o dispon√≠vel');
            alert('‚ùå Fun√ß√£o de gera√ß√£o n√£o est√° dispon√≠vel. Recarregue a p√°gina.');
            return;
        }
        
        return false;
    };
    
    btnGerar.disabled = false;
    btnGerar.textContent = 'üé≤ Gerar Nova Cartela';
    btnGerar.title = 'Gerar cartela com reserva tempor√°ria no banco';
    
    console.log('‚úÖ Bot√£o configurado com valida√ß√£o Firebase');
}

// Fun√ß√£o wrapper para executar gera√ß√£o
function executarGeracao() {
    console.log('üé≤ Executando gera√ß√£o de cartela...');
    
    try {
        gerarCartelaCompleta();
    } catch (error) {
        console.error('‚ùå Erro ao executar gerarCartelaCompleta:', error);
        alert('Erro: ' + error.message);
    }
}

// Mostrar cartela na interface
function mostrarCartela(cartela) {
    console.log('üé´ === EXIBINDO CARTELA ===');
    console.log('üìã Dados da cartela:', cartela);
    console.log('üî¢ N√∫meros da cartela:', cartela.numeros);
    
    const container = document.getElementById('cartela-preview');
    if (!container) {
        console.error('‚ùå Container cartela-preview n√£o encontrado');
        return;
    }
    
    // IMPORTANTE: Armazenar n√∫meros globalmente para acesso posterior
    window.numerosCartelaAtual = cartela.numeros;
    window.cartelaAtualExibida = cartela;
    console.log('üíæ N√∫meros armazenados globalmente:', window.numerosCartelaAtual);
    
    // HTML da cartela com formato BINGO 5x5 (24 n√∫meros + espa√ßo livre central)
    container.innerHTML = `
        <div style="background: white; color: black; padding: 20px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);">
            <h3 style="margin: 0 0 15px 0; text-align: center;">üé´ Cartela ${cartela.id.substring(5, 15)}</h3>
            
            <!-- Header BINGO -->
            <div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 3px; margin: 10px 0;">
                <div style="background: #e74c3c; color: white; text-align: center; font-size: 1.2em; font-weight: bold; padding: 8px; border-radius: 5px;">B</div>
                <div style="background: #e74c3c; color: white; text-align: center; font-size: 1.2em; font-weight: bold; padding: 8px; border-radius: 5px;">I</div>
                <div style="background: #e74c3c; color: white; text-align: center; font-size: 1.2em; font-weight: bold; padding: 8px; border-radius: 5px;">N</div>
                <div style="background: #e74c3c; color: white; text-align: center; font-size: 1.2em; font-weight: bold; padding: 8px; border-radius: 5px;">G</div>
                <div style="background: #e74c3c; color: white; text-align: center; font-size: 1.2em; font-weight: bold; padding: 8px; border-radius: 5px;">O</div>
            </div>
            
            <!-- Grid de n√∫meros (5x5 com espa√ßo livre central) -->
            <div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 3px; margin: 15px 0;">
                ${cartela.numeros.slice(0, 12).map(num => 
                    `<div style="background: #4CAF50; color: white; padding: 12px; text-align: center; border-radius: 5px; font-weight: bold; font-size: 16px;">${num}</div>`
                ).join('')}
                <div style="background: #f39c12; color: white; padding: 12px; text-align: center; border-radius: 5px; font-weight: bold; font-size: 14px;">‚≠ê<br>LIVRE</div>
                ${cartela.numeros.slice(12).map(num => 
                    `<div style="background: #4CAF50; color: white; padding: 12px; text-align: center; border-radius: 5px; font-weight: bold; font-size: 16px;">${num}</div>`
                ).join('')}
            </div>
            
            <p style="text-align: center; margin: 15px 0 0 0; font-size: 18px; font-weight: bold;">
                üí∞ Pre√ßo: R$ ${cartela.preco.toFixed(2)} | üéØ ${cartela.numeros.length} n√∫meros
            </p>
        </div>
    `;
    
    // Habilitar bot√£o comprar
    const btnComprar = document.getElementById('comprar-cartela');
    if (btnComprar) {
        btnComprar.disabled = false;
        btnComprar.textContent = 'üõí Adicionar ao Carrinho';
    }
    
    console.log('‚úÖ Cartela exibida na interface');
}

// Configurar outros bot√µes
function configurarOutrosBotoes() {
    // Bot√£o adicionar ao carrinho - usar vers√£o corrigida
    const btnComprar = document.getElementById('comprar-cartela');
    if (btnComprar) {
        btnComprar.addEventListener('click', function() {
            console.log('üõí Bot√£o comprar clicado');
            if (typeof adicionarAoCarrinhoCorrigida === 'function') {
                console.log('‚úÖ Usando adicionarAoCarrinhoCorrigida');
                adicionarAoCarrinhoCorrigida();
            } else {
                console.warn('‚ö†Ô∏è adicionarAoCarrinhoCorrigida n√£o dispon√≠vel, usando fallback');
                adicionarAoCarrinho();
            }
        });
        console.log('‚úÖ Bot√£o comprar configurado com vers√£o corrigida');
    }
    
    // Bot√£o finalizar compra
    const btnFinalizar = document.getElementById('finalizar-compra');
    if (btnFinalizar) {
        btnFinalizar.addEventListener('click', abrirModal);
        console.log('‚úÖ Bot√£o finalizar configurado');
    }
    
    // Form de checkout - usar sempre a vers√£o corrigida
    const formCheckout = document.getElementById('form-checkout');
    if (formCheckout) {
        console.log('üìù Formul√°rio encontrado:', formCheckout);
        
        // Remover listeners anteriores se existirem
        formCheckout.removeEventListener('submit', processarCompra);
        formCheckout.removeEventListener('submit', processarCompraCorrigida);
        
        // Fun√ß√£o para garantir que a vers√£o corrigida seja usada
        const processarCompraWrapper = async function(event) {
            console.log('üí≥ Wrapper de compra chamado');
            
            if (typeof processarCompraCorrigida === 'function') {
                console.log('‚úÖ Usando processarCompraCorrigida');
                return await processarCompraCorrigida(event);
            } else {
                console.warn('‚ö†Ô∏è processarCompraCorrigida n√£o dispon√≠vel, usando fallback');
                return await processarCompra(event);
            }
        };
        
        // Adicionar listener wrapper
        formCheckout.addEventListener('submit', processarCompraWrapper);
        console.log('‚úÖ Form checkout configurado com wrapper de fun√ß√£o corrigida');
        
        // Teste direto do listener
        console.log('üß™ Testando se listener foi adicionado...');
        
    } else {
        console.error('‚ùå Formul√°rio form-checkout n√£o encontrado!');
    }
    
    // Bot√£o limpar carrinho
    const btnLimpar = document.getElementById('limpar-carrinho');
    if (btnLimpar) {
        btnLimpar.addEventListener('click', limparCarrinho);
        console.log('‚úÖ Bot√£o limpar configurado');
    }
}

// Adicionar cartela ao carrinho
function adicionarAoCarrinho() {
    if (!cartelaAtual) {
        alert('Gere uma cartela primeiro!');
        return;
    }
    
    console.log('üõí === ADICIONAR AO CARRINHO ===');
    console.log('üìã Cartela atual:', cartelaAtual);
    console.log('üîç N√∫meros da cartela atual:', cartelaAtual.numeros);
    
    // Verificar se h√° diverg√™ncia com a interface
    if (typeof extrairNumerosDoPreview === 'function') {
        const numerosInterface = extrairNumerosDoPreview();
        console.log('üîç N√∫meros extra√≠dos da interface:', numerosInterface);
        
        if (numerosInterface.length > 0 && JSON.stringify(cartelaAtual.numeros) !== JSON.stringify(numerosInterface)) {
            console.warn('‚ö†Ô∏è DIVERG√äNCIA DETECTADA! Corrigindo...');
            console.warn('üìã Cartela atual:', cartelaAtual.numeros);
            console.warn('üñ•Ô∏è Interface:', numerosInterface);
            cartelaAtual.numeros = numerosInterface; // Corrigir usando interface
        }
    }
    
    // Adicionar c√≥pia ao carrinho
    const cartelaCopia = { ...cartelaAtual };
    carrinho.push(cartelaCopia);
    
    console.log('üíæ Cartela adicionada ao carrinho:', cartelaCopia);
    console.log('üõí Carrinho atual:', carrinho);
    
    // Sincronizar com vari√°vel global
    window.carrinho = carrinho;
    
    // Salvar no localStorage para persist√™ncia
    try {
        localStorage.setItem('bingo-carrinho', JSON.stringify(carrinho));
        console.log('üíæ Carrinho salvo no localStorage');
    } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao salvar carrinho no localStorage:', error);
    }
    
    // Limpar cartela atual
    cartelaAtual = null;
    
    // Limpar preview
    const container = document.getElementById('cartela-preview');
    if (container) {
        container.innerHTML = '<div style="text-align: center; padding: 40px; color: #666;"><p>Clique em "Gerar Cartela" para ver sua cartela</p></div>';
    }
    
    // Desabilitar bot√£o comprar
    const btnComprar = document.getElementById('comprar-cartela');
    if (btnComprar) {
        btnComprar.disabled = true;
        btnComprar.textContent = 'üõí Comprar Esta Cartela';
    }
    
    // Atualizar carrinho
    atualizarCarrinho();
    
    console.log('‚úÖ Cartela adicionada ao carrinho');
}

// Fun√ß√£o completa para adicionar ao carrinho (com integra√ß√£o Firebase)
function adicionarAoCarrinhoCompleta() {
    console.log('üõí Adicionando ao carrinho (vers√£o completa)...');
    adicionarAoCarrinho();
}

// Atualizar carrinho
function atualizarCarrinho() {
    const lista = document.getElementById('carrinho-lista');
    const total = document.getElementById('carrinho-total');
    
    if (lista) {
        if (carrinho.length === 0) {
            lista.innerHTML = '<p class="carrinho-vazio">Carrinho vazio</p>';
        } else {
            lista.innerHTML = carrinho.map((cartela, index) => `
                <div class="item-carrinho" style="display: flex; justify-content: space-between; align-items: center; padding: 8px; border-bottom: 1px solid #eee;">
                    <span>Cartela ${index + 1}</span>
                    <span>R$ ${cartela.preco.toFixed(2)}</span>
                    <button onclick="removerDoCarrinho(${index})" style="background: #f44336; color: white; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer;">‚ùå</button>
                </div>
            `).join('');
        }
    }
    
    if (total) {
        const valorTotal = carrinho.reduce((sum, cartela) => sum + cartela.preco, 0);
        total.textContent = `R$ ${valorTotal.toFixed(2)}`;
    }
    
    // Habilitar/desabilitar bot√£o finalizar
    const btnFinalizar = document.getElementById('finalizar-compra');
    if (btnFinalizar) {
        btnFinalizar.disabled = carrinho.length === 0;
    }
}

// Remover do carrinho
function removerDoCarrinho(index) {
    console.log('üóëÔ∏è Removendo item', index);
    carrinho.splice(index, 1);
    // Sincronizar com vari√°vel global
    window.carrinho = carrinho;
    atualizarCarrinho();
}

// Limpar carrinho
function limparCarrinho() {
    console.log('üßπ Limpando carrinho...');
    carrinho = [];
    // Sincronizar com vari√°vel global
    window.carrinho = carrinho;
    atualizarCarrinho();
}

// Abrir modal
function abrirModal() {
    console.log('üéØ === ABRINDO MODAL ===');
    console.log('üõí Carrinho atual:', carrinho);
    console.log('üìä Tamanho do carrinho:', carrinho.length);
    
    if (carrinho.length === 0) {
        console.log('‚ùå Carrinho vazio, n√£o abrindo modal');
        alert('Carrinho vazio!');
        return;
    }
    
    const modal = document.getElementById('modal-checkout');
    console.log('üîç Modal encontrado:', !!modal);
    
    if (modal) {
        modal.style.display = 'block';
        console.log('‚úÖ Modal exibido');
        
        // Atualizar resumo da compra
        const resumoCartelas = document.getElementById('resumo-cartelas');
        console.log('üîç Resumo cartelas encontrado:', !!resumoCartelas);
        
        if (resumoCartelas) {
            resumoCartelas.innerHTML = `
                <p>${carrinho.length} cartela(s) selecionada(s)</p>
                ${carrinho.map((cartela, index) => 
                    `<p>Cartela ${index + 1}: R$ ${cartela.preco.toFixed(2)}</p>`
                ).join('')}
            `;
            console.log('‚úÖ Resumo atualizado');
        }
        
        const totalFinal = document.getElementById('total-final');
        if (totalFinal) {
            const total = carrinho.reduce((sum, cartela) => sum + cartela.preco, 0);
            totalFinal.textContent = `R$ ${total.toFixed(2)}`;
        }
        
        console.log('üí≥ Modal aberto');
    }
}

// Fechar modal
function fecharModal() {
    const modal = document.getElementById('modal-checkout');
    if (modal) {
        modal.style.display = 'none';
    }
}

// Fun√ß√£o global para fechar modal (usada no HTML)
function fecharCheckout() {
    fecharModal();
}

// Processar compra e gravar no Firebase
async function processarCompra(event) {
    console.log('üéØ === PROCESSAR COMPRA CHAMADA ===');
    console.log('üìã Event:', event);
    console.log('üìã Event type:', event.type);
    console.log('üìã Target:', event.target);
    
    event.preventDefault();
    
    console.log('üí∞ Processando compra...');
    console.log('üî• Firebase dispon√≠vel:', typeof firebase !== 'undefined');
    console.log('üî• FirebaseDB dispon√≠vel:', !!window.FirebaseDB);
    
    // === SINCRONIZA√á√ÉO CR√çTICA DO CARRINHO ===
    console.log('üîÑ Verificando sincroniza√ß√£o do carrinho...');
    console.log('üõí Carrinho local:', carrinho);
    console.log('üåê Carrinho global:', window.carrinho);
    
    // Priorizar carrinho com mais itens ou o global se existir
    if (window.carrinho && window.carrinho.length > 0) {
        if (carrinho.length === 0 || window.carrinho.length > carrinho.length) {
            carrinho = [...window.carrinho];
            console.log('üîÑ Carrinho sincronizado com dados globais:', carrinho);
        }
    }
    
    // Se ainda n√£o h√° carrinho, tentar recuperar do localStorage
    if (carrinho.length === 0) {
        try {
            const carrinhoStorage = localStorage.getItem('bingo-carrinho');
            if (carrinhoStorage) {
                const carrinhoRecuperado = JSON.parse(carrinhoStorage);
                if (Array.isArray(carrinhoRecuperado) && carrinhoRecuperado.length > 0) {
                    carrinho = carrinhoRecuperado;
                    console.log('üîÑ Carrinho recuperado do localStorage:', carrinho);
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao recuperar carrinho do localStorage:', error);
        }
    }
    
    console.log('üìä Carrinho final para processamento:', carrinho);
    console.log('üìä Total de itens no carrinho:', carrinho.length);
    
    try {
        // Verificar se o Firebase est√° dispon√≠vel
        if (typeof firebase === 'undefined') {
            throw new Error('Firebase n√£o est√° carregado. Verifique os scripts no HTML.');
        }
        
        // Verificar se FirebaseDB foi inicializado
        if (!window.FirebaseDB) {
            console.warn('‚ö†Ô∏è FirebaseDB n√£o dispon√≠vel, tentando inicializar...');
            
            // Tentar inicializar Firebase manualmente
            if (typeof initializeFirebaseUnified === 'function') {
                await initializeFirebaseUnified();
            } else {
                throw new Error('Fun√ß√£o de inicializa√ß√£o do Firebase n√£o encontrada');
            }
            
            // Verificar novamente
            if (!window.FirebaseDB) {
                throw new Error('Falha ao inicializar FirebaseDB');
            }
        }
        
        // Obter dados do formul√°rio
        const form = event.target;
        const formData = new FormData(form);
        
        const comprador = {
            nome: formData.get('nome') || document.getElementById('nome-comprador').value,
            telefone: formData.get('telefone') || document.getElementById('telefone-comprador').value
        };
        
        console.log('üë§ Dados do comprador:', comprador);
        
        // Validar dados obrigat√≥rios
        if (!comprador.nome || !comprador.nome.trim()) {
            alert('Nome √© obrigat√≥rio!');
            return;
        }
        
        if (!comprador.telefone || !comprador.telefone.trim()) {
            alert('Telefone √© obrigat√≥rio!');
            return;
        }
        
        // Verificar se h√° cartelas no carrinho
        // Primeiro, sincronizar carrinho com os dados globais
        if (window.carrinho && window.carrinho.length > 0) {
            carrinho = window.carrinho;
            console.log('üîÑ Carrinho sincronizado com dados globais:', carrinho);
        }
        
        if (!carrinho || carrinho.length === 0) {
            alert('Carrinho vazio! Adicione cartelas antes de finalizar.');
            console.error('‚ùå Carrinho est√° vazio:', carrinho);
            return;
        }
        
        console.log('üõí Carrinho atual detalhado:', carrinho);
        console.log(`üìä Total de cartelas no carrinho: ${carrinho.length}`);
        
        // VERIFICA√á√ÉO CR√çTICA: Log detalhado dos n√∫meros de cada cartela
        carrinho.forEach((cartela, index) => {
            console.log(`üé´ Cartela ${index + 1}:`, {
                id: cartela.id,
                numeros: cartela.numeros,
                quantidade: cartela.numeros?.length || 0,
                preco: cartela.preco
            });
        });
        
        // Mostrar loading
        const btnSubmit = form.querySelector('button[type="submit"]');
        let textoOriginal = btnSubmit.textContent;
        btnSubmit.textContent = '‚è≥ Salvando no Firebase...';
        btnSubmit.disabled = true;
        
        console.log(`üíæ Preparando ${carrinho.length} cartela(s) para salvar...`);
        
        // Preparar cartelas para salvar
        const cartelasParaSalvar = carrinho.map((cartela, index) => {
            console.log(`üìã Preparando cartela ${index + 1} para salvamento:`, cartela);
            
            const cartelaPreparada = {
                id: cartela.id,
                numeros: cartela.numeros, // MANTER n√∫meros originais do carrinho
                preco: cartela.preco,
                status: 'vendida',
                comprador: {
                    nome: comprador.nome.trim(),
                    telefone: normalizarTelefone(comprador.telefone)
                },
                nome: comprador.nome.trim(),
                telefone: normalizarTelefone(comprador.telefone),
                dataCompra: new Date(),
                timestamp: Date.now()
            };
            
            console.log(`üìã Cartela ${index + 1} preparada - N√öMEROS FINAIS:`, cartelaPreparada.numeros);
            console.log(`üìã Cartela ${index + 1} preparada COMPLETA:`, cartelaPreparada);
            return cartelaPreparada;
        });
        
        console.log(`üíæ Preparando ${cartelasParaSalvar.length} cartela(s) para salvar`);
        
        // Salvar cada cartela
        const resultados = [];
        console.log('üî• Tentando salvar cartelas no Firebase...');
        
        // Verificar se FirebaseDB est√° dispon√≠vel
        if (!window.FirebaseDB) {
            throw new Error('FirebaseDB n√£o est√° dispon√≠vel. Verifique se o firebase-config.js foi carregado.');
        }
        
        for (let i = 0; i < cartelasParaSalvar.length; i++) {
            const cartela = cartelasParaSalvar[i];
            console.log(`üíæ Salvando cartela ${i + 1}/${cartelasParaSalvar.length}:`, cartela);
            
            try {                        // Usar o m√©todo saveCartela do FirebaseDB (VERS√ÉO CORRIGIDA)
                        console.log('üî• Usando m√©todo FirebaseDB.saveCartela CORRIGIDO (m√©todo do admin)');
                        const resultado = await window.FirebaseDB.saveCartela(cartela);
                
                if (resultado.success) {
                    console.log(`‚úÖ Cartela ${cartela.id} salva com ID Firebase: ${resultado.id}`);
                    resultados.push({ id: resultado.id, status: 'sucesso', original: cartela.id });
                } else {
                    throw new Error('Falha ao salvar cartela');
                }
                
            } catch (error) {
                console.error(`‚ùå Erro ao salvar cartela ${cartela.id}:`, error);
                resultados.push({ id: cartela.id, status: 'erro', erro: error.message });
            }
        }
        
        // Analisar resultados
        const sucessos = resultados.filter(r => r.status === 'sucesso').length;
        const erros = resultados.filter(r => r.status !== 'sucesso').length;
        
        console.log(`üìä RESULTADO FINAL: ${sucessos} sucessos, ${erros} erros`);
        console.log('üìã Detalhes:', resultados);
        
        if (sucessos > 0) {
            alert(`‚úÖ ${sucessos} cartela(s) gravada(s) com sucesso no Firebase!${erros > 0 ? ` (${erros} erro(s))` : ''}`);
            
            // Limpar carrinho
            carrinho = [];
            // Sincronizar com vari√°vel global
            window.carrinho = carrinho;
            
            // Limpar localStorage
            try {
                localStorage.removeItem('bingo-carrinho');
                console.log('üßπ Carrinho removido do localStorage');
            } catch (error) {
                console.warn('‚ö†Ô∏è Erro ao limpar localStorage:', error);
            }
            
            atualizarCarrinho();
            
            // Fechar modal
            fecharModal();
            
            // Resetar formul√°rio
            form.reset();
            
            console.log('üéâ Compra processada com sucesso!');
        } else {
            alert('‚ùå ERRO: Nenhuma cartela foi salva. Verifique sua conex√£o e tente novamente.');
            console.error('‚ùå FALHA TOTAL: Nenhuma cartela foi salva');
        }
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico no processamento:', error);
        alert(`‚ùå Erro cr√≠tico: ${error.message}`);
    } finally {
        // Restaurar bot√£o
        const btnSubmit = event.target.querySelector('button[type="submit"]');
        if (btnSubmit) {
            btnSubmit.textContent = textoOriginal;
            btnSubmit.disabled = false;
        }
    }
}

// Normalizar telefone (remover formata√ß√£o)
function normalizarTelefone(telefone) {
    if (!telefone) return '';
    return telefone.toString().replace(/\D/g, '');
}

console.log('‚úÖ Cartelas.js carregado - aguardando DOM...');

// ===== CORRE√á√ÉO CR√çTICA: SISTEMA DE RESERVA TEMPOR√ÅRIA =====
// Esta corre√ß√£o grava a cartela temporariamente no banco durante a gera√ß√£o
// e confirma a venda na finaliza√ß√£o, eliminando diverg√™ncias

window.ultimaCartelaGerada = null; // Fonte √∫nica da verdade
window.cartelaReservada = null; // Cartela reservada no banco

// Fun√ß√£o para gravar reserva tempor√°ria no Firebase
async function gravarReservaTemporaria(cartela) {
    console.log('üíæ === GRAVANDO RESERVA TEMPOR√ÅRIA ===');
    console.log('üìã Cartela para reservar:', cartela);
    
    try {
        // Verificar se Firebase est√° dispon√≠vel
        if (typeof firebase === 'undefined' || !firebase.firestore) {
            console.warn('‚ö†Ô∏è Firebase n√£o dispon√≠vel - usando modo local');
            return { success: true, id: cartela.id, modo: 'local' };
        }
        
        const db = firebase.firestore();
        
        // Preparar dados da reserva tempor√°ria
        const reservaTemporaria = {
            id: cartela.id,
            numeros: cartela.numeros,
            preco: cartela.preco,
            status: 'reservada-temporariamente',
            dataReserva: firebase.firestore.FieldValue.serverTimestamp(),
            expiracaoReserva: new Date(Date.now() + 30 * 60 * 1000), // 30 minutos
            sessao: `sessao-${Date.now()}`
        };
        
        console.log('üíæ Dados da reserva:', reservaTemporaria);
        
        // Salvar no Firestore
        await db.collection('cartelas').doc(cartela.id).set(reservaTemporaria);
        
        console.log('‚úÖ RESERVA TEMPOR√ÅRIA GRAVADA:', cartela.id);
        
        return { 
            success: true, 
            id: cartela.id, 
            modo: 'firebase',
            numeros: cartela.numeros 
        };
        
    } catch (error) {
        console.error('‚ùå Erro ao gravar reserva tempor√°ria:', error);
        // Em caso de erro, continuar em modo local
        return { 
            success: true, 
            id: cartela.id, 
            modo: 'local-fallback',
            erro: error.message 
        };
    }
}

// Fun√ß√£o para confirmar reserva (finalizar venda)
async function confirmarReserva(cartelaId, dadosComprador) {
    console.log('‚úÖ === CONFIRMANDO RESERVA ===');
    console.log('üÜî ID da cartela:', cartelaId);
    console.log('üë§ Dados do comprador:', dadosComprador);
    
    try {
        if (typeof firebase === 'undefined' || !firebase.firestore) {
            console.warn('‚ö†Ô∏è Firebase n√£o dispon√≠vel - confirma√ß√£o local');
            return { success: true, modo: 'local' };
        }
        
        const db = firebase.firestore();
        
        // Buscar reserva existente
        const docRef = db.collection('cartelas').doc(cartelaId);
        const doc = await docRef.get();
        
        if (!doc.exists) {
            throw new Error('Reserva n√£o encontrada no banco');
        }
        
        const reservaData = doc.data();
        console.log('üìã Reserva encontrada:', reservaData);
        
        // Atualizar para cartela vendida
        const cartelaVendida = {
            ...reservaData,
            status: 'vendida',
            comprador: {
                nome: dadosComprador.nome.trim(),
                telefone: normalizarTelefone(dadosComprador.telefone)
            },
            nome: dadosComprador.nome.trim(),
            telefone: normalizarTelefone(dadosComprador.telefone),
            dataVenda: firebase.firestore.FieldValue.serverTimestamp(),
            dataCompra: new Date(),
            timestamp: Date.now(),
            // Manter n√∫meros originais da reserva
            numerosOriginais: reservaData.numeros,
            numerosConfirmados: reservaData.numeros
        };
        
        console.log('üíæ Confirmando venda:', cartelaVendida);
        
        // Atualizar documento
        await docRef.set(cartelaVendida);
        
        console.log('‚úÖ RESERVA CONFIRMADA E CARTELA VENDIDA:', cartelaId);
        
        return { 
            success: true, 
            id: cartelaId, 
            modo: 'firebase',
            numeros: reservaData.numeros 
        };
        
    } catch (error) {
        console.error('‚ùå Erro ao confirmar reserva:', error);
        return { 
            success: false, 
            erro: error.message 
        };
    }
}

// Fun√ß√£o para cancelar reserva (se usu√°rio sair sem comprar)
async function cancelarReserva(cartelaId) {
    console.log('‚ùå === CANCELANDO RESERVA ===');
    console.log('üÜî ID da cartela:', cartelaId);
    
    try {
        if (typeof firebase === 'undefined' || !firebase.firestore) {
            console.warn('‚ö†Ô∏è Firebase n√£o dispon√≠vel - cancelamento local');
            return { success: true, modo: 'local' };
        }
        
        const db = firebase.firestore();
        
        // Remover reserva tempor√°ria
        await db.collection('cartelas').doc(cartelaId).delete();
        
        console.log('‚úÖ RESERVA CANCELADA:', cartelaId);
        
        return { success: true, id: cartelaId };
        
    } catch (error) {
        console.error('‚ùå Erro ao cancelar reserva:', error);
        return { success: false, erro: error.message };
    }
}

// Fun√ß√£o corrigida para gerar cartela COM RESERVA TEMPOR√ÅRIA
async function gerarCartelaCorrigida() {
    console.log('üé≤ === GERA√á√ÉO COM RESERVA TEMPOR√ÅRIA ===');
    
    try {
        // Se j√° h√° uma cartela reservada, cancelar primeiro
        if (window.cartelaReservada) {
            console.log('üóëÔ∏è Cancelando reserva anterior...');
            await cancelarReserva(window.cartelaReservada.id);
        }
        
        // Gerar n√∫meros aleat√≥rios uma √∫nica vez
        const numeros = [];
        const disponiveis = [];
        
        for (let i = 1; i <= 75; i++) {
            disponiveis.push(i);
        }
        
        for (let i = 0; i < 24; i++) {
            const indice = Math.floor(Math.random() * disponiveis.length);
            numeros.push(disponiveis.splice(indice, 1)[0]);
        }
        
        numeros.sort((a, b) => a - b);
        
        // Criar cartela
        const cartela = {
            id: `CART-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
            numeros: [...numeros], // C√≥pia dos n√∫meros
            preco: 5.00,
            status: 'preview'
        };
        
        console.log('üìã CARTELA GERADA:', cartela);
        console.log('üî¢ N√öMEROS GERADOS:', numeros);
        
        // PASSO CR√çTICO: Gravar reserva tempor√°ria no banco
        const resultadoReserva = await gravarReservaTemporaria(cartela);
        
        if (resultadoReserva.success) {
            // Armazenar como fonte √∫nica da verdade
            window.ultimaCartelaGerada = cartela;
            window.cartelaAtual = cartela;
            window.numerosCartelaAtual = [...numeros];
            window.cartelaReservada = cartela; // Marcar como reservada
            
            console.log('ÔøΩ RESERVA TEMPOR√ÅRIA CRIADA:', resultadoReserva);
            
            // Mostrar na interface
            mostrarCartelaCorrigida(cartela, resultadoReserva);
            
            return cartela;
        } else {
            throw new Error('Falha ao criar reserva tempor√°ria');
        }
        
    } catch (error) {
        console.error('‚ùå Erro na gera√ß√£o com reserva:', error);
        alert('Erro ao gerar cartela: ' + error.message);
        throw error;
    }
}

// Fun√ß√£o corrigida para mostrar cartela com informa√ß√µes de reserva
function mostrarCartelaCorrigida(cartela, resultadoReserva = null) {
    console.log('üé´ === EXIBI√á√ÉO COM RESERVA TEMPOR√ÅRIA ===');
    console.log('üìã Cartela a exibir:', cartela);
    console.log('üíæ Resultado da reserva:', resultadoReserva);
    
    const container = document.getElementById('cartela-preview');
    if (!container) {
        console.error('‚ùå Container n√£o encontrado');
        return;
    }
    
    // Usar n√∫meros da fonte √∫nica
    const numeros = cartela.numeros;
    
    // Determinar status da reserva
    let statusReserva = '‚ö†Ô∏è Modo local';
    let corStatus = '#ffc107';
    
    if (resultadoReserva) {
        if (resultadoReserva.modo === 'firebase') {
            statusReserva = '‚úÖ Reservada no banco';
            corStatus = '#28a745';
        } else if (resultadoReserva.modo === 'local-fallback') {
            statusReserva = '‚ö†Ô∏è Fallback local';
            corStatus = '#ffc107';
        }
    }
    
    container.innerHTML = `
        <div style="background: white; color: black; padding: 20px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);">
            <h3 style="margin: 0 0 15px 0; text-align: center;">üé´ Cartela ${cartela.id.substring(5, 15)}</h3>
            
            <!-- Status da Reserva -->
            <div style="background: ${corStatus}; color: white; padding: 8px; border-radius: 5px; text-align: center; margin-bottom: 15px; font-weight: bold;">
                ${statusReserva}
            </div>
            
            <!-- Header BINGO -->
            <div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 3px; margin: 10px 0;">
                <div style="background: #e74c3c; color: white; text-align: center; font-size: 1.2em; font-weight: bold; padding: 8px; border-radius: 5px;">B</div>
                <div style="background: #e74c3c; color: white; text-align: center; font-size: 1.2em; font-weight: bold; padding: 8px; border-radius: 5px;">I</div>
                <div style="background: #e74c3c; color: white; text-align: center; font-size: 1.2em; font-weight: bold; padding: 8px; border-radius: 5px;">N</div>
                <div style="background: #e74c3c; color: white; text-align: center; font-size: 1.2em; font-weight: bold; padding: 8px; border-radius: 5px;">G</div>
                <div style="background: #e74c3c; color: white; text-align: center; font-size: 1.2em; font-weight: bold; padding: 8px; border-radius: 5px;">O</div>
            </div>
            
            <!-- Grid de n√∫meros -->
            <div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 3px; margin: 15px 0;">
                ${numeros.slice(0, 12).map(num => 
                    `<div style="background: #4CAF50; color: white; padding: 12px; text-align: center; border-radius: 5px; font-weight: bold; font-size: 16px;">${num}</div>`
                ).join('')}
                <div style="background: #f39c12; color: white; padding: 12px; text-align: center; border-radius: 5px; font-weight: bold; font-size: 14px;">‚≠ê<br>LIVRE</div>
                ${numeros.slice(12).map(num => 
                    `<div style="background: #4CAF50; color: white; padding: 12px; text-align: center; border-radius: 5px; font-weight: bold; font-size: 16px;">${num}</div>`
                ).join('')}
            </div>
            
            <p style="text-align: center; margin: 15px 0 0 0; font-size: 18px; font-weight: bold;">
                üí∞ Pre√ßo: R$ ${cartela.preco.toFixed(2)} | üéØ ${cartela.numeros.length} n√∫meros
            </p>
        </div>
    `;
    
    // Habilitar bot√µes
    const btnComprar = document.getElementById('comprar-cartela');
    if (btnComprar) {
        btnComprar.disabled = false;
        btnComprar.textContent = 'üõí Adicionar ao Carrinho';
    }
    
    const btnGerar = document.getElementById('gerar-cartela');
    if (btnGerar) {
        btnGerar.disabled = false;
        btnGerar.textContent = 'üé≤ Gerar Nova Cartela';
    }
    
    console.log('‚úÖ CARTELA EXIBIDA COM RESERVA TEMPOR√ÅRIA:', cartela);
}

// Fun√ß√£o corrigida para adicionar ao carrinho (com reserva tempor√°ria)
function adicionarAoCarrinhoCorrigida() {
    console.log('üõí === ADICIONAR AO CARRINHO COM RESERVA ===');
    
    if (!window.cartelaReservada) {
        alert('Gere uma cartela primeiro!');
        console.error('‚ùå Nenhuma cartela reservada encontrada');
        return;
    }
    
    console.log('üìã Cartela reservada:', window.cartelaReservada);
    
    // A cartela j√° est√° no banco como reserva tempor√°ria
    // Apenas adicionar ao carrinho LOCAL para interface
    const cartelaParaCarrinho = {
        ...window.cartelaReservada,
        numeros: [...window.cartelaReservada.numeros], // Manter n√∫meros da reserva
        statusLocal: 'no-carrinho'
    };
    
    console.log('üíæ ADICIONANDO AO CARRINHO LOCAL:', cartelaParaCarrinho);
    console.log('üî¢ N√öMEROS (DA RESERVA):', cartelaParaCarrinho.numeros);
    
    // Adicionar ao carrinho
    if (!window.carrinho) window.carrinho = [];
    window.carrinho.push(cartelaParaCarrinho);
    carrinho = window.carrinho;
    
    // Salvar no localStorage
    try {
        localStorage.setItem('bingo-carrinho', JSON.stringify(carrinho));
    } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao salvar no localStorage:', error);
    }
    
    // Limpar preview
    const container = document.getElementById('cartela-preview');
    if (container) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #666;">
                <p>üé´ Cartela adicionada ao carrinho!</p>
                <p style="font-size: 12px; color: #28a745;">‚úÖ Reserva tempor√°ria mantida no banco</p>
                <p style="font-size: 12px;">Clique em "Gerar Cartela" para ver uma nova cartela</p>
            </div>
        `;
    }
    
    // Limpar refer√™ncias locais (mas manter reserva no banco)
    window.ultimaCartelaGerada = null;
    window.cartelaAtual = null;
    // N√ÉO limpar cartelaReservada - ela ser√° confirmada na finaliza√ß√£o
    
    // Desabilitar bot√£o
    const btnComprar = document.getElementById('comprar-cartela');
    if (btnComprar) {
        btnComprar.disabled = true;
        btnComprar.textContent = 'üõí Comprar Esta Cartela';
    }
    
    // Atualizar carrinho
    if (typeof atualizarCarrinho === 'function') {
        atualizarCarrinho();
    }
    
    console.log('‚úÖ CARTELA ADICIONADA AO CARRINHO (RESERVA MANTIDA)');
    console.log('üõí CARRINHO ATUAL:', carrinho);
}

// Fun√ß√£o corrigida para processar compra (confirmar reservas)
async function processarCompraCorrigida(event) {
    console.log('üí≥ === PROCESSAR COMPRA - CONFIRMAR RESERVAS ===');
    
    if (event) event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    
    const comprador = {
        nome: formData.get('nome'),
        telefone: formData.get('telefone')
    };
    
    console.log('üë§ Dados do comprador:', comprador);
    
    if (!comprador.nome || !comprador.telefone) {
        alert('Preencha todos os campos!');
        return;
    }
    
    // Usar carrinho global
    const carrinhoAtual = window.carrinho || carrinho || [];
    
    if (carrinhoAtual.length === 0) {
        alert('Carrinho vazio!');
        console.error('‚ùå Carrinho vazio');
        return;
    }
    
    console.log('üõí CARRINHO PARA CONFIRMAR:', carrinhoAtual);
    
    // Mostrar loading
    const btnSubmit = form.querySelector('button[type="submit"]');
    let textoOriginal = btnSubmit.textContent;
    btnSubmit.textContent = '‚è≥ Confirmando reservas...';
    btnSubmit.disabled = true;
    
    try {
        const resultados = [];
        
        // Confirmar cada reserva tempor√°ria
        for (let i = 0; i < carrinhoAtual.length; i++) {
            const cartela = carrinhoAtual[i];
            console.log(`ÔøΩ Confirmando reserva ${i + 1}/${carrinhoAtual.length}:`, cartela.id);
            
            const resultado = await confirmarReserva(cartela.id, comprador);
            
            if (resultado.success) {
                console.log(`‚úÖ Reserva ${cartela.id} confirmada`);
                resultados.push({ 
                    id: cartela.id, 
                    status: 'confirmada',
                    numeros: resultado.numeros || cartela.numeros
                });
            } else {
                console.error(`‚ùå Falha ao confirmar reserva ${cartela.id}:`, resultado.erro);
                resultados.push({ 
                    id: cartela.id, 
                    status: 'erro', 
                    erro: resultado.erro 
                });
            }
        }
        
        // Analisar resultados
        const sucessos = resultados.filter(r => r.status === 'confirmada').length;
        const erros = resultados.filter(r => r.status === 'erro').length;
        
        console.log(`ÔøΩ RESULTADO FINAL: ${sucessos} confirmadas, ${erros} erros`);
        console.log('üìã Detalhes:', resultados);
        
        if (sucessos > 0) {
            // Mostrar n√∫meros das cartelas confirmadas
            let mensagem = `‚úÖ ${sucessos} cartela(s) confirmada(s) com sucesso!\n\n`;
            
            resultados.filter(r => r.status === 'confirmada').forEach((resultado, index) => {
                mensagem += `Cartela ${index + 1} (${resultado.id}): [${resultado.numeros.join(', ')}]\n`;
            });
            
            if (erros > 0) {
                mensagem += `\n‚ö†Ô∏è ${erros} erro(s) ocorreram.`;
            }
            
            alert(mensagem);
            
            // Limpar carrinho e reservas
            window.carrinho = [];
            carrinho = [];
            window.cartelaReservada = null;
            
            // Limpar localStorage
            try {
                localStorage.removeItem('bingo-carrinho');
                console.log('üßπ Carrinho removido do localStorage');
            } catch (error) {
                console.warn('‚ö†Ô∏è Erro ao limpar localStorage:', error);
            }
            
            if (typeof atualizarCarrinho === 'function') {
                atualizarCarrinho();
            }
            
            // Fechar modal
            if (typeof fecharModal === 'function') {
                fecharModal();
            }
            
            // Resetar formul√°rio
            form.reset();
            
            console.log('üéâ COMPRA PROCESSADA - RESERVAS CONFIRMADAS!');
        } else {
            alert('‚ùå ERRO: Nenhuma reserva foi confirmada. Verifique sua conex√£o e tente novamente.');
            console.error('‚ùå FALHA TOTAL: Nenhuma reserva confirmada');
        }
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico no processamento:', error);
        alert(`‚ùå Erro cr√≠tico: ${error.message}`);
    } finally {
        // Restaurar bot√£o
        if (btnSubmit) {
            btnSubmit.textContent = textoOriginal;
            btnSubmit.disabled = false;
        }
    }
}

// Registrar fun√ß√£o globalmente logo ap√≥s defini√ß√£o
if (typeof processarCompraCorrigida === 'function') {
    window.processarCompraCorrigida = processarCompraCorrigida;
    window.processarCompra = processarCompraCorrigida; // Alias para substituir a vers√£o antiga
    console.log('üåê processarCompraCorrigida registrada globalmente');
}

// Registrar fun√ß√£o globalmente logo ap√≥s defini√ß√£o
if (typeof gerarCartelaCorrigida === 'function') {
    window.gerarCartelaCorrigida = gerarCartelaCorrigida;
    window.gerarCartela = gerarCartelaCorrigida; // Alias
    console.log('üåê gerarCartelaCorrigida registrada globalmente');
}

// Registrar fun√ß√£o globalmente logo ap√≥s defini√ß√£o
if (typeof adicionarAoCarrinhoCorrigida === 'function') {
    window.adicionarAoCarrinhoCorrigida = adicionarAoCarrinhoCorrigida;
    window.adicionarAoCarrinhoCompleta = adicionarAoCarrinhoCorrigida;
    console.log('üåê adicionarAoCarrinhoCorrigida registrada globalmente');
}

// ===== SISTEMA DE LIMPEZA DE RESERVAS EXPIRADAS =====
async function limparReservasExpiradas() {
    console.log('üßπ === LIMPEZA DE RESERVAS EXPIRADAS ===');
    
    try {
        if (typeof firebase === 'undefined' || !firebase.firestore) {
            console.log('‚ö†Ô∏è Firebase n√£o dispon√≠vel - limpeza pulada');
            return;
        }
        
        const db = firebase.firestore();
        const agora = new Date();
        
        // Buscar reservas tempor√°rias expiradas
        const snapshot = await db.collection('cartelas')
            .where('status', '==', 'reservada-temporariamente')
            .where('expiracaoReserva', '<', agora)
            .get();
        
        if (snapshot.empty) {
            console.log('‚úÖ Nenhuma reserva expirada encontrada');
            return;
        }
        
        console.log(`üóëÔ∏è Encontradas ${snapshot.size} reservas expiradas`);
        
        // Remover reservas expiradas
        const batch = db.batch();
        snapshot.forEach(doc => {
            console.log(`‚ùå Removendo reserva expirada: ${doc.id}`);
            batch.delete(doc.ref);
        });
        
        await batch.commit();
        console.log(`‚úÖ ${snapshot.size} reservas expiradas removidas`);
        
    } catch (error) {
        console.error('‚ùå Erro na limpeza de reservas:', error);
    }
}

// Fun√ß√£o para cancelar reserva local quando usu√°rio sair
function cancelarReservaLocal() {
    if (window.cartelaReservada) {
        console.log('üóëÔ∏è Cancelando reserva local ao sair...');
        cancelarReserva(window.cartelaReservada.id);
        window.cartelaReservada = null;
    }
}

// Configurar limpeza autom√°tica e eventos de sa√≠da
window.addEventListener('beforeunload', () => {
    // Cancelar reserva se usu√°rio sair sem comprar
    cancelarReservaLocal();
});

// Limpeza peri√≥dica de reservas expiradas (a cada 5 minutos)
setInterval(limparReservasExpiradas, 5 * 60 * 1000);

// Limpeza inicial ap√≥s 10 segundos
setTimeout(limparReservasExpiradas, 10000);

console.log('üîß SISTEMA DE RESERVA TEMPOR√ÅRIA CONFIGURADO');

// ===== INICIALIZA√á√ÉO DOM =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± DOM carregado - aplicando corre√ß√µes finais...');
    
    // Garantir que as fun√ß√µes corrigidas estejam dispon√≠veis
    setTimeout(() => {
        // Configurar bot√£o gerar
        const btnGerar = document.getElementById('gerar-preview');
        if (btnGerar) {
            btnGerar.onclick = async function() {
                console.log('üéØ Bot√£o gerar clicado - usando fun√ß√£o com reserva tempor√°ria');
                await gerarCartelaCorrigida();
            };
            console.log('‚úÖ Bot√£o gerar configurado com reserva tempor√°ria');
        }
        
        // Configurar bot√£o adicionar ao carrinho
        const btnComprar = document.getElementById('comprar-cartela');
        if (btnComprar) {
            btnComprar.onclick = function() {
                console.log('üõí Bot√£o comprar clicado - usando fun√ß√£o corrigida');
                adicionarAoCarrinhoCorrigida();
            };
            console.log('‚úÖ Bot√£o comprar configurado com fun√ß√£o corrigida');
        }
        
        // Configurar formul√°rio de checkout
        const formCheckout = document.getElementById('form-checkout');
        if (formCheckout) {
            formCheckout.onsubmit = async function(e) {
                console.log('üí≥ Formul√°rio submetido - confirmando reservas');
                await processarCompraCorrigida(e);
            };
            console.log('‚úÖ Formul√°rio configurado para confirmar reservas');
        }
        
        console.log('üéâ TODAS AS CORRE√á√ïES APLICADAS COM SUCESSO!');
        
        // ===== REGISTRAR FUN√á√ïES GLOBALMENTE (FINAL) =====
        console.log('üîß Registrando fun√ß√µes globalmente...');
        
        // Registrar fun√ß√µes corrigidas globalmente
        if (typeof gerarCartelaCorrigida === 'function') {
            window.gerarCartelaCorrigida = gerarCartelaCorrigida;
            window.gerarCartela = gerarCartelaCorrigida; // Alias
            console.log('üåê gerarCartelaCorrigida registrada globalmente');
        } else {
            console.error('‚ùå gerarCartelaCorrigida n√£o encontrada');
        }
        
        if (typeof adicionarAoCarrinhoCorrigida === 'function') {
            window.adicionarAoCarrinhoCorrigida = adicionarAoCarrinhoCorrigida;
            window.adicionarAoCarrinhoCompleta = adicionarAoCarrinhoCorrigida;
            console.log('‚úÖ adicionarAoCarrinhoCorrigida registrada globalmente');
        } else {
            console.error('‚ùå adicionarAoCarrinhoCorrigida n√£o encontrada');
        }
        
        if (typeof processarCompraCorrigida === 'function') {
            window.processarCompraCompleta = processarCompraCorrigida;
            console.log('‚úÖ processarCompraCorrigida registrada globalmente');
        } else {
            console.error('‚ùå processarCompraCorrigida n√£o encontrada');
        }
        
        // Registrar outras fun√ß√µes
        if (typeof abrirModal === 'function') {
            window.abrirModalCompleto = abrirModal;
            console.log('‚úÖ abrirModal registrada globalmente');
        }
        
        console.log('üîß TODAS AS FUN√á√ïES REGISTRADAS - Sistema pronto para uso!');
    }, 100);
});

// Fallback para caso DOM j√° esteja carregado
if (document.readyState === 'loading') {
    console.log('‚è≥ Aguardando DOM...');
} else {
    console.log('‚úÖ DOM j√° carregado - aplicando corre√ß√µes...');
    document.dispatchEvent(new Event('DOMContentLoaded'));
}

// Fun√ß√£o para verificar e exibir status do sistema
function verificarStatusSistema() {
    const firebaseOk = window.FirebaseDB && typeof firebase !== 'undefined' && firebase.firestore;
    const funcoesOk = typeof gerarCartelaCorrigida === 'function' && typeof adicionarAoCarrinhoCorrigida === 'function' && typeof processarCompraCorrigida === 'function';
    
    console.log('üîç === STATUS DO SISTEMA ===');
    console.log('üî• Firebase dispon√≠vel:', firebaseOk);
    console.log('‚öôÔ∏è Fun√ß√µes corrigidas dispon√≠veis:', funcoesOk);
    console.log('üì± FirebaseDB:', !!window.FirebaseDB);
    console.log('üîß Firebase SDK:', typeof firebase !== 'undefined');
    console.log('üóÉÔ∏è Firestore:', typeof firebase !== 'undefined' ? !!firebase.firestore : false);
    
    // Mostrar aviso visual se n√£o estiver tudo ok
    const statusDiv = document.getElementById('status-sistema');
    if (statusDiv) {
        if (firebaseOk && funcoesOk) {
            statusDiv.innerHTML = '‚úÖ Sistema Online - Firebase Ativo';
            statusDiv.style.background = '#d4edda';
            statusDiv.style.color = '#155724';
            statusDiv.style.display = 'block';
        } else {
            statusDiv.innerHTML = '‚ö†Ô∏è Sistema em Modo Degradado - Algumas funcionalidades podem n√£o funcionar';
            statusDiv.style.background = '#fff3cd';
            statusDiv.style.color = '#856404';
            statusDiv.style.display = 'block';
        }
        
        // Esconder depois de 5 segundos se estiver tudo ok
        if (firebaseOk && funcoesOk) {
            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, 5000);
        }
    }
    
    return { firebaseOk, funcoesOk };
}

// Chamar fun√ß√£o de verifica√ß√£o de status ao carregar o script
setTimeout(verificarStatusSistema, 1000);