// ===== SISTEMA DE AUTENTICA√á√ÉO ADMIN - BINGO INEC =====

// Credenciais do administrador (mesmo do sistema original)
const ADMIN_CREDENTIALS = {
    email: 'admin@bingoinec.org.br',
    password: 'wooFestadeComida'
};

// Chave para armazenar sess√£o no localStorage
const SESSION_KEY = 'bingoAdminSession';
const SESSION_EXPIRY_HOURS = 8; // Sess√£o expira em 8 horas

// Verificar se o usu√°rio est√° autenticado
function isUserAuthenticated() {
    const sessionData = getSessionData();
    
    if (!sessionData) {
        return false;
    }
    
    // Verificar se a sess√£o n√£o expirou
    const now = new Date();
    const expiry = new Date(sessionData.expiryTime);
    
    if (now >= expiry) {
        // Sess√£o expirada, remover
        localStorage.removeItem(SESSION_KEY);
        return false;
    }
    
    return true;
}

// Obter dados da sess√£o
function getSessionData() {
    try {
        const data = localStorage.getItem(SESSION_KEY);
        return data ? JSON.parse(data) : null;
    } catch (error) {
        console.error('Erro ao ler dados da sess√£o:', error);
        localStorage.removeItem(SESSION_KEY);
        return null;
    }
}

// Criar sess√£o ap√≥s login bem-sucedido
function createSession(email) {
    const now = new Date();
    const expiryTime = new Date(now.getTime() + (SESSION_EXPIRY_HOURS * 60 * 60 * 1000));
    
    const sessionData = {
        email: email,
        loginTime: now.toISOString(),
        expiryTime: expiryTime.toISOString(),
        isAdmin: true
    };
    
    localStorage.setItem(SESSION_KEY, JSON.stringify(sessionData));
    console.log('‚úÖ Sess√£o criada para:', email);
}

// Fazer logout
function logout() {
    if (confirm('üö™ Deseja realmente sair da √°rea administrativa?')) {
        localStorage.removeItem(SESSION_KEY);
        console.log('üö™ Logout realizado');
        window.location.href = 'index.html';
    }
}

// Verificar credenciais
function validateCredentials(email, password) {
    return email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password;
}

// Solicitar login se n√£o estiver autenticado
function requireAuthentication() {
    if (isUserAuthenticated()) {
        console.log('‚úÖ Usu√°rio j√° autenticado');
        return true;
    }
    
    console.log('üîê Autentica√ß√£o necess√°ria');
    
    // Mostrar dialog de login
    const email = prompt('üìß Digite seu email de administrador:');
    if (!email) {
        console.log('‚ùå Login cancelado');
        return false;
    }
    
    const password = prompt('üîí Digite sua senha:');
    if (!password) {
        console.log('‚ùå Login cancelado');
        return false;
    }
    
    if (validateCredentials(email, password)) {
        createSession(email);
        console.log('‚úÖ Login bem-sucedido');
        return true;
    } else {
        alert('‚ùå Credenciais inv√°lidas!');
        console.log('‚ùå Credenciais inv√°lidas');
        return false;
    }
}

// Obter informa√ß√µes do usu√°rio logado
function getUserInfo() {
    const sessionData = getSessionData();
    if (sessionData && isUserAuthenticated()) {
        return {
            email: sessionData.email,
            loginTime: sessionData.loginTime,
            isAdmin: sessionData.isAdmin
        };
    }
    return null;
}

// Formatar tempo de sess√£o
function getSessionTimeString() {
    const userInfo = getUserInfo();
    if (userInfo) {
        const loginTime = new Date(userInfo.loginTime);
        return `Logado desde ${loginTime.toLocaleTimeString()}`;
    }
    return 'N√£o logado';
}

console.log('üîê Sistema de autentica√ß√£o admin carregado');
