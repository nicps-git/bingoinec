// ADMIN.JS SIMPLIFICADO - DEBUG
console.log('üîÑ [ADMIN] Iniciando vers√£o simplificada...');

// Vari√°veis globais
let firebaseService = null;
let configuracoes = {};

// Fun√ß√£o de inicializa√ß√£o simplificada
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üîÑ [ADMIN] DOM carregado');
    
    try {
        // Aguardar Firebase carregar
        await aguardarFirebase();
        
        // Inicializar Firebase Service
        firebaseService = new FirebaseService();
        console.log('‚úÖ [ADMIN] Firebase Service criado');
        
        // Configurar bot√µes
        configurarBotoes();
        
        // Carregar dados iniciais
        await carregarDadosIniciais();
        
        console.log('‚úÖ [ADMIN] Inicializa√ß√£o conclu√≠da com sucesso');
        
    } catch (error) {
        console.error('‚ùå [ADMIN] Erro:', error);
        alert(`Erro na inicializa√ß√£o: ${error.message}`);
    }
});

// Aguardar Firebase estar dispon√≠vel
function aguardarFirebase() {
    return new Promise((resolve, reject) => {
        let tentativas = 0;
        const maxTentativas = 30;
        
        const verificar = () => {
            tentativas++;
            
            if (typeof firebase !== 'undefined' && typeof FirebaseService !== 'undefined') {
                console.log('‚úÖ [ADMIN] Firebase dispon√≠vel');
                resolve();
                return;
            }
            
            if (tentativas >= maxTentativas) {
                reject(new Error('Timeout: Firebase n√£o carregou'));
                return;
            }
            
            console.log(`üîÑ [ADMIN] Aguardando Firebase... (${tentativas}/${maxTentativas})`);
            setTimeout(verificar, 200);
        };
        
        verificar();
    });
}

// Configurar eventos dos bot√µes
function configurarBotoes() {
    console.log('üîÑ [ADMIN] Configurando bot√µes...');
    
    // Bot√£o Salvar Configura√ß√µes
    const salvarBtn = document.getElementById('salvar-config');
    if (salvarBtn) {
        salvarBtn.onclick = salvarConfiguracoes;
        console.log('‚úÖ Bot√£o salvar configurado');
    }
    
    // Bot√£o Resetar Jogo
    const resetarBtn = document.getElementById('resetar-jogo');
    if (resetarBtn) {
        resetarBtn.onclick = resetarJogo;
        console.log('‚úÖ Bot√£o resetar configurado');
    }
    
    // Bot√£o Ir para Bingo
    const bingoBtn = document.getElementById('ir-para-bingo');
    if (bingoBtn) {
        bingoBtn.onclick = () => window.location.href = 'index.html';
        console.log('‚úÖ Bot√£o bingo configurado');
    }
    
    // Bot√£o Gerar Cartela
    const gerarBtn = document.getElementById('gerar-cartela');
    if (gerarBtn) {
        gerarBtn.onclick = gerarCartela;
        console.log('‚úÖ Bot√£o gerar cartela configurado');
    }
    
    // Bot√£o Ver Vendas
    const vendasBtn = document.getElementById('ver-vendas');
    if (vendasBtn) {
        vendasBtn.onclick = verVendas;
        console.log('‚úÖ Bot√£o ver vendas configurado');
    }
    
    // Bot√£o Limpar Hist√≥rico
    const limparBtn = document.getElementById('limpar-historico');
    if (limparBtn) {
        limparBtn.onclick = limparHistorico;
        console.log('‚úÖ Bot√£o limpar hist√≥rico configurado');
    }
    
    console.log('‚úÖ [ADMIN] Todos os bot√µes configurados');
}

// Carregar dados iniciais
async function carregarDadosIniciais() {
    console.log('üîÑ [ADMIN] Carregando dados iniciais...');
    
    try {
        // Carregar configura√ß√µes
        configuracoes = await firebaseService.carregarConfiguracoes();
        console.log('‚úÖ Configura√ß√µes carregadas:', configuracoes);
        
        // Atualizar interface
        atualizarInterface();
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar dados:', error);
        // N√£o falhar por isso, apenas log
    }
}

// Atualizar interface com dados
function atualizarInterface() {
    console.log('üîÑ [ADMIN] Atualizando interface...');
    
    // N√∫mero inicial
    const numeroInicial = document.getElementById('numero-inicial');
    if (numeroInicial && configuracoes.numeroInicial) {
        numeroInicial.value = configuracoes.numeroInicial;
    }
    
    // N√∫mero final
    const numeroFinal = document.getElementById('numero-final');
    if (numeroFinal && configuracoes.numeroFinal) {
        numeroFinal.value = configuracoes.numeroFinal;
    }
    
    // Pre√ßo cartela
    const precoCartela = document.getElementById('preco-cartela');
    if (precoCartela && configuracoes.precoCartela) {
        precoCartela.value = configuracoes.precoCartela;
    }
    
    // Calcular total de n√∫meros
    calcularTotalNumeros();
    
    console.log('‚úÖ [ADMIN] Interface atualizada');
}

// Calcular total de n√∫meros
function calcularTotalNumeros() {
    const numeroInicial = document.getElementById('numero-inicial');
    const numeroFinal = document.getElementById('numero-final');
    const totalSpan = document.getElementById('total-numeros');
    const rangeSpan = document.getElementById('range-atual');
    
    if (numeroInicial && numeroFinal && totalSpan && rangeSpan) {
        const inicio = parseInt(numeroInicial.value) || 1;
        const fim = parseInt(numeroFinal.value) || 75;
        const total = fim - inicio + 1;
        
        totalSpan.textContent = total;
        rangeSpan.textContent = `${inicio} a ${fim}`;
    }
}

// Eventos dos inputs para recalcular
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        const numeroInicial = document.getElementById('numero-inicial');
        const numeroFinal = document.getElementById('numero-final');
        
        if (numeroInicial) {
            numeroInicial.addEventListener('input', calcularTotalNumeros);
        }
        if (numeroFinal) {
            numeroFinal.addEventListener('input', calcularTotalNumeros);
        }
    }, 1000);
});

// Fun√ß√µes dos bot√µes
async function salvarConfiguracoes() {
    console.log('üîÑ [ADMIN] Salvando configura√ß√µes...');
    
    try {
        const numeroInicial = document.getElementById('numero-inicial');
        const numeroFinal = document.getElementById('numero-final');
        const precoCartela = document.getElementById('preco-cartela');
        
        const config = {
            numeroInicial: parseInt(numeroInicial?.value) || 1,
            numeroFinal: parseInt(numeroFinal?.value) || 75,
            precoCartela: parseFloat(precoCartela?.value) || 5.00,
            jogoAtivo: true
        };
        
        await firebaseService.salvarConfiguracoes(config);
        
        alert('‚úÖ Configura√ß√µes salvas com sucesso!');
        console.log('‚úÖ [ADMIN] Configura√ß√µes salvas');
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar:', error);
        alert(`Erro ao salvar configura√ß√µes: ${error.message}`);
    }
}

async function resetarJogo() {
    if (!confirm('‚ö†Ô∏è Tem certeza que deseja resetar o jogo? Isso vai limpar todos os n√∫meros sorteados!')) {
        return;
    }
    
    console.log('üîÑ [ADMIN] Resetando jogo...');
    
    try {
        await firebaseService.resetarJogo();
        alert('‚úÖ Jogo resetado com sucesso!');
        console.log('‚úÖ [ADMIN] Jogo resetado');
        
    } catch (error) {
        console.error('‚ùå Erro ao resetar:', error);
        alert(`Erro ao resetar jogo: ${error.message}`);
    }
}

async function gerarCartela() {
    console.log('üîÑ [ADMIN] Gerando cartela...');
    
    try {
        // Aqui voc√™ pode implementar a l√≥gica de gera√ß√£o
        alert('üé´ Fun√ß√£o de gerar cartela em desenvolvimento');
        
    } catch (error) {
        console.error('‚ùå Erro ao gerar cartela:', error);
        alert(`Erro ao gerar cartela: ${error.message}`);
    }
}

async function verVendas() {
    console.log('üîÑ [ADMIN] Carregando vendas...');
    
    try {
        // Aqui voc√™ pode implementar a visualiza√ß√£o de vendas
        alert('üí∞ Fun√ß√£o de ver vendas em desenvolvimento');
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar vendas:', error);
        alert(`Erro ao carregar vendas: ${error.message}`);
    }
}

async function limparHistorico() {
    if (!confirm('‚ö†Ô∏è Tem certeza que deseja limpar o hist√≥rico de n√∫meros sorteados?')) {
        return;
    }
    
    console.log('üîÑ [ADMIN] Limpando hist√≥rico...');
    
    try {
        await firebaseService.limparNumerosSorteados();
        alert('‚úÖ Hist√≥rico limpo com sucesso!');
        console.log('‚úÖ [ADMIN] Hist√≥rico limpo');
        
    } catch (error) {
        console.error('‚ùå Erro ao limpar hist√≥rico:', error);
        alert(`Erro ao limpar hist√≥rico: ${error.message}`);
    }
}

// Fun√ß√£o de logout
function logout() {
    if (confirm('Tem certeza que deseja sair?')) {
        if (window.bingoAuth) {
            window.bingoAuth.logout();
        }
        window.location.href = 'index.html';
    }
}

console.log('‚úÖ [ADMIN] Script simplificado carregado');
