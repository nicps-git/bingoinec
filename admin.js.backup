// Fun√ß√£o para aguardar sistema de autentica√ß√£o estar dispon√≠vel
function waitForAuthSystem() {
    return new Promise((resolve) => {
        if (typeof window.bingoAuth !== 'undefined') {
            resolve();
            return;
        }
        
        const checkAuth = () => {
            if (typeof window.bingoAuth !== 'undefined') {
                resolve();
            } else {
                setTimeout(checkAuth, 100);
            }
        };
        
        checkAuth();
    });
}

// Fun√ß√£o para aguardar todas as depend√™ncias estarem dispon√≠veis
function waitForAllDependencies() {
    return new Promise((resolve, reject) => {
        let tentativas = 0;
        const maxTentativas = 50; // 5 segundos
        
        const checkDependencies = () => {
            tentativas++;
            
            const dependencias = {
                'Firebase SDK': typeof firebase !== 'undefined',
                'Firebase Config': typeof firebaseConfig !== 'undefined', 
                'FirebaseService': typeof FirebaseService !== 'undefined',
                'BingoAuth': typeof window.bingoAuth !== 'undefined'
            };
            
            const dependenciasFaltando = Object.entries(dependencias)
                .filter(([nome, carregado]) => !carregado)
                .map(([nome]) => nome);
            
            if (dependenciasFaltando.length === 0) {
                console.log('‚úÖ [DEBUG] Todas as depend√™ncias dispon√≠veis');
                resolve();
                return;
            }
            
            if (tentativas >= maxTentativas) {
                reject(new Error(`Timeout: Depend√™ncias n√£o carregaram: ${dependenciasFaltando.join(', ')}`));
                return;
            }
            
            console.log(`üîÑ [DEBUG] Aguardando depend√™ncias (${tentativas}/${maxTentativas}):`, dependenciasFaltando);
            setTimeout(checkDependencies, 100);
        };
        
        checkDependencies();
    });
}

// Fun√ß√£o principal de inicializa√ß√£o
async function initializeAdmin() {
    console.log('üîê [ADMIN] Inicializando √°rea administrativa...');
    
    try {
        // Tentar aguardar depend√™ncias com timeout menor
        const timeout = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Timeout na verifica√ß√£o de depend√™ncias')), 3000);
        });
        
        const waitDeps = waitForAllDependencies();
        
        await Promise.race([waitDeps, timeout]);
        console.log('üîê [ADMIN] Todas as depend√™ncias carregadas');
        
        // Verificar autentica√ß√£o de forma mais flex√≠vel
        if (typeof window.bingoAuth !== 'undefined') {
            let autenticado = window.bingoAuth.isAuthenticated();
            console.log('üîê [ADMIN] Status autentica√ß√£o inicial:', autenticado);
            
            if (!autenticado) {
                console.log('üîê [ADMIN] Usu√°rio n√£o autenticado, solicitando login...');
                autenticado = window.bingoAuth.requireAuth();
                console.log('üîê [ADMIN] Resultado da autentica√ß√£o:', autenticado);
                
                if (!autenticado) {
                    console.log('‚ùå [ADMIN] Autentica√ß√£o cancelada/falhou, redirecionando...');
                    setTimeout(() => {
                        window.location.href = 'index.html';
                    }, 1000);
                    return;
                }
            }
            
            console.log('‚úÖ [ADMIN] Usu√°rio autenticado com sucesso');
            updateUserInfo();
        } else {
            console.warn('‚ö†Ô∏è [ADMIN] Sistema de autentica√ß√£o n√£o dispon√≠vel, continuando sem autentica√ß√£o');
        }
        
        // Continuar com a inicializa√ß√£o da p√°gina admin
        await initializeAdminPage();
        
    } catch (error) {
        console.error('‚ùå [ADMIN] Erro na inicializa√ß√£o:', error);
        throw error; // Re-throw para o catch principal
    }
}

async function initializeAdminPage() {
    
    // ===== ELEMENTOS DO DOM =====
    console.log('üîç Buscando elementos DOM...');
    const numeroInicialInput = document.getElementById('numero-inicial');
    const numeroFinalInput = document.getElementById('numero-final');
    const totalNumerosSpan = document.getElementById('total-numeros');
    const rangeAtualSpan = document.getElementById('range-atual');
    const numerosSorteadosCountSpan = document.getElementById('numeros-sorteados-count');
    const numerosRestantesSpan = document.getElementById('numeros-restantes');
    const historicoContainer = document.getElementById('historico-numeros');
    
    const salvarConfigBtn = document.getElementById('salvar-config');
    const resetarJogoBtn = document.getElementById('resetar-jogo');
    const irParaBingoBtn = document.getElementById('ir-para-bingo');
    const limparHistoricoBtn = document.getElementById('limpar-historico');
    const atualizarNumerosBtn = document.getElementById('atualizar-numeros');

    // Elementos do sistema de cartelas
    const precoCartelaInput = document.getElementById('preco-cartela');
    const gerarCartelaBtn = document.getElementById('gerar-cartela');
    const verVendasBtn = document.getElementById('ver-vendas');
    const cartelasGeradasSpan = document.getElementById('cartelas-geradas');
    const cartelasVendidasSpan = document.getElementById('cartelas-vendidas');
    const totalArrecadadoSpan = document.getElementById('total-arrecadado');
    const modalVendas = document.getElementById('modal-vendas');
    const listaCartelas = document.getElementById('lista-cartelas');
    const closeModal = document.querySelector('.close');

    // Verificar se todos os elementos essenciais foram encontrados
    const elementos = {
        numeroInicialInput, numeroFinalInput, salvarConfigBtn, resetarJogoBtn, 
        irParaBingoBtn, limparHistoricoBtn, atualizarNumerosBtn, gerarCartelaBtn, verVendasBtn, 
        modalVendas, closeModal
    };
    
    const elementosFaltando = Object.entries(elementos).filter(([nome, el]) => !el);
    if (elementosFaltando.length > 0) {
        console.error('‚ùå Elementos DOM n√£o encontrados:', elementosFaltando.map(([nome]) => nome));
        alert('Erro: Alguns elementos da p√°gina n√£o foram encontrados. Recarregue a p√°gina.');
        return;
    }
    
    console.log('‚úÖ Todos os elementos DOM encontrados');

    let configuracoes = {};
    let numerosSorteados = [];
    let cartelas = [];

    // Inicializa√ß√£o robusta do Firebase Service
    console.log('üî• [ADMIN] Inicializando Firebase Service...');
    
    let firebaseService = null;
    let sistemaInicializado = false;
    
    // Fun√ß√£o para inicializar Firebase Service
    async function inicializarFirebase() {
        try {
            console.log('ÔøΩ [ADMIN] Verificando depend√™ncias...');
            
            // Verificar se Firebase SDK est√° carregado
            if (typeof firebase === 'undefined') {
                throw new Error('Firebase SDK n√£o carregado');
            }
            console.log('‚úÖ [ADMIN] Firebase SDK carregado');
            
            // Tentar criar inst√¢ncia do Firebase Service
            if (typeof FirebaseService !== 'undefined') {
                firebaseService = new FirebaseService();
                console.log('‚úÖ [ADMIN] Firebase Service instanciado');
                
                // Testar conex√£o
                try {
                    const conexaoOk = await firebaseService.verificarConexao();
                    if (conexaoOk) {
                        console.log('‚úÖ [ADMIN] Conex√£o com Firebase estabelecida');
                        sistemaInicializado = true;
                        window.firebaseService = firebaseService; // Para compatibilidade
                        return true;
                    } else {
                        console.warn('‚ö†Ô∏è [ADMIN] Conex√£o fraca, mas continuando...');
                        sistemaInicializado = true;
                        window.firebaseService = firebaseService;
                        return true;
                    }
                } catch (connError) {
                    console.warn('‚ö†Ô∏è [ADMIN] Erro na verifica√ß√£o de conex√£o, mas continuando:', connError.message);
                    sistemaInicializado = true;
                    window.firebaseService = firebaseService;
                    return true;
                }
            } else {
                throw new Error('Classe FirebaseService n√£o encontrada');
            }
            
        } catch (error) {
            console.error('‚ùå [ADMIN] Erro ao inicializar Firebase:', error.message);
            return false;
        }
    }
    
    // Tentar inicializar Firebase
    const firebaseInicializado = await inicializarFirebase();
    
    if (!firebaseInicializado) {
        console.error('‚ùå [ADMIN] Firebase n√£o conseguiu inicializar');
        alert('‚ùå Erro ao carregar sistema Firebase. Verifique sua conex√£o com a internet e recarregue a p√°gina.');
        return;
    }
    
    console.log('üéâ [ADMIN] Firebase inicializado com sucesso!');

    // ===== FUN√á√ïES PRINCIPAIS =====

    // Fun√ß√£o robusta para buscar n√∫meros sorteados com m√∫ltiplas tentativas
    async function buscarNumerosSorteadosRobusta() {
        console.log('üîç [ADMIN] Iniciando busca robusta de n√∫meros sorteados...');
        let numerosEncontrados = [];
        
        // Tentativa 1: FirebaseService
        if (sistemaInicializado && firebaseService && typeof firebaseService.carregarNumerosSorteados === 'function') {
            try {
                console.log('üéØ [ADMIN] Tentativa 1: Via FirebaseService...');
                numerosEncontrados = await firebaseService.carregarNumerosSorteados();
                console.log('üìä [ADMIN] FirebaseService retornou:', numerosEncontrados.length, 'n√∫meros');
                
                if (numerosEncontrados.length > 0) {
                    console.log('‚úÖ [ADMIN] Sucesso via FirebaseService:', numerosEncontrados);
                    return numerosEncontrados;
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è [ADMIN] FirebaseService falhou:', error.message);
            }
        }
        
        // Tentativa 2: Busca direta no Firestore
        if (typeof firebase !== 'undefined' && firebase.firestore) {
            try {
                console.log('üéØ [ADMIN] Tentativa 2: Busca direta no Firestore...');
                const db = firebase.firestore();
                
                // Sub-tentativa 2a: Com orderBy
                try {
                    const snapshot = await db.collection('numeros-sorteados').orderBy('dataSorteio', 'asc').get();
                    console.log(`üìä [ADMIN] Firestore com orderBy: ${snapshot.size} documentos`);
                    
                    if (snapshot.size > 0) {
                        const numeros = [];
                        snapshot.forEach(doc => {
                            const data = doc.data();
                            if (data.numero !== undefined && data.numero !== null) {
                                numeros.push(data.numero);
                            }
                        });
                        
                        if (numeros.length > 0) {
                            console.log('‚úÖ [ADMIN] Sucesso via Firestore com orderBy:', numeros);
                            return numeros;
                        }
                    }
                } catch (orderByError) {
                    console.log('‚ö†Ô∏è [ADMIN] Firestore com orderBy falhou:', orderByError.message);
                }
                
                // Sub-tentativa 2b: Sem orderBy
                try {
                    const snapshot = await db.collection('numeros-sorteados').get();
                    console.log(`üìä [ADMIN] Firestore sem orderBy: ${snapshot.size} documentos`);
                    
                    if (snapshot.size > 0) {
                        const numeros = [];
                        snapshot.forEach(doc => {
                            const data = doc.data();
                            if (data.numero !== undefined && data.numero !== null) {
                                numeros.push(data.numero);
                            }
                        });
                        
                        if (numeros.length > 0) {
                            // Ordenar manualmente por timestamp se dispon√≠vel
                            numeros.sort((a, b) => {
                                // Se tiver timestamp, usar para ordenar, sen√£o ordenar por n√∫mero
                                return a - b;
                            });
                            console.log('‚úÖ [ADMIN] Sucesso via Firestore sem orderBy:', numeros);
                            return numeros;
                        }
                    }
                } catch (noOrderError) {
                    console.warn('‚ö†Ô∏è [ADMIN] Firestore sem orderBy falhou:', noOrderError.message);
                }
                
                // Sub-tentativa 2c: Tentar outras cole√ß√µes poss√≠veis
                const colecoesPossiveies = ['jogo-status', 'configuracoes', 'bingo-dados'];
                for (const colecao of colecoesPossiveies) {
                    try {
                        console.log(`üéØ [ADMIN] Tentando cole√ß√£o: ${colecao}...`);
                        const snapshot = await db.collection(colecao).get();
                        console.log(`üìä [ADMIN] Cole√ß√£o ${colecao}: ${snapshot.size} documentos`);
                        
                        snapshot.forEach(doc => {
                            const data = doc.data();
                            if (data.numerosSorteados && Array.isArray(data.numerosSorteados)) {
                                if (data.numerosSorteados.length > numerosEncontrados.length) {
                                    numerosEncontrados = data.numerosSorteados;
                                    console.log(`‚úÖ [ADMIN] N√∫meros encontrados em ${colecao}:`, numerosEncontrados);
                                }
                            }
                        });
                    } catch (colecaoError) {
                        console.log(`‚ö†Ô∏è [ADMIN] Cole√ß√£o ${colecao} falhou:`, colecaoError.message);
                    }
                }
                
                if (numerosEncontrados.length > 0) {
                    return numerosEncontrados;
                }
                
            } catch (firestoreError) {
                console.warn('‚ö†Ô∏è [ADMIN] Busca no Firestore falhou:', firestoreError.message);
            }
        }
        
        // Tentativa 3: localStorage
        try {
            console.log('üéØ [ADMIN] Tentativa 3: localStorage...');
            const numerosLocais = JSON.parse(localStorage.getItem('numeros_sorteados') || '[]');
            if (numerosLocais.length > 0) {
                console.log('‚úÖ [ADMIN] Sucesso via localStorage:', numerosLocais);
                return numerosLocais;
            }
        } catch (localStorageError) {
            console.warn('‚ö†Ô∏è [ADMIN] localStorage falhou:', localStorageError.message);
        }
        
        // Tentativa 4: Dados de demonstra√ß√£o (apenas para debug)
        console.log('üéØ [ADMIN] Tentativa 4: Verificando se h√° dados demo...');
        const dadosDemo = JSON.parse(localStorage.getItem('bingo_demo_numbers') || '[]');
        if (dadosDemo.length > 0) {
            console.log('üìù [ADMIN] Usando dados demo:', dadosDemo);
            return dadosDemo;
        }
        
        console.log('üì≠ [ADMIN] Nenhum n√∫mero sorteado encontrado em todas as tentativas');
        return [];
    }

    // Carregar dados do Firebase
    async function carregarDados() {
        try {
            console.log('üì¶ [ADMIN] Carregando dados...');
            
            // Carregar configura√ß√µes
            if (sistemaInicializado && firebaseService && typeof firebaseService.carregarConfiguracoes === 'function') {
                try {
                    configuracoes = await firebaseService.carregarConfiguracoes();
                    console.log('üìã [ADMIN] Configura√ß√µes carregadas:', configuracoes);
                } catch (configError) {
                    console.warn('‚ö†Ô∏è [ADMIN] Erro ao carregar configura√ß√µes do Firebase:', configError.message);
                    // Fallback para configura√ß√µes locais
                    configuracoes = JSON.parse(localStorage.getItem('bingo_configuracoes') || '{"numeroInicial": 1, "numeroFinal": 75, "precoCartela": 5.00}');
                }
            } else {
                configuracoes = JSON.parse(localStorage.getItem('bingo_configuracoes') || '{"numeroInicial": 1, "numeroFinal": 75, "precoCartela": 5.00}');
                console.log('üìã [ADMIN] Configura√ß√µes carregadas do localStorage:', configuracoes);
            }
            
            // Carregar cartelas
            if (sistemaInicializado && firebaseService && typeof firebaseService.carregarCartelas === 'function') {
                try {
                    cartelas = await firebaseService.carregarCartelas();
                    console.log('üé´ [ADMIN] Cartelas carregadas do Firebase:', cartelas.length);
                } catch (cartelasError) {
                    console.warn('‚ö†Ô∏è [ADMIN] Erro ao carregar cartelas do Firebase:', cartelasError.message);
                    cartelas = JSON.parse(localStorage.getItem('bingo_cartelas_vendidas') || '[]');
                }
            } else {
                cartelas = JSON.parse(localStorage.getItem('bingo_cartelas_vendidas') || '[]');
                console.log('üé´ [ADMIN] Cartelas carregadas do localStorage:', cartelas.length);
            }

            // Fallback para cartelas se necess√°rio
            if (cartelas.length === 0) {
                const cartelasLocais = JSON.parse(localStorage.getItem('bingo_cartelas_vendidas') || '[]');
                if (cartelasLocais.length > 0) {
                    cartelas = cartelasLocais;
                    console.log('üìÇ [ADMIN] Usando cartelas do localStorage como fallback');
                }
            }

            // Usar fun√ß√£o robusta para carregar n√∫meros sorteados
            console.log('üé≤ [ADMIN] Carregando n√∫meros sorteados com fun√ß√£o robusta...');
            numerosSorteados = await buscarNumerosSorteadosRobusta();
            console.log('üé≤ [ADMIN] N√∫meros sorteados carregados:', numerosSorteados.length, numerosSorteados);

            // Atualizar displays com hist√≥rico robusto
            atualizarDisplay();
            atualizarRangeAtual();
            atualizarEstatisticasCartelas();
            await atualizarHistoricoRobusta();
            
            console.log('‚úÖ [ADMIN] Todos os dados carregados com sucesso');
            
        } catch (error) {
            console.error('‚ùå [ADMIN] Erro ao carregar dados:', error);
            // Carregar dados locais como fallback final
            carregarDadosLocais();
        }
    }

    function carregarDadosLocais() {
        configuracoes = JSON.parse(localStorage.getItem('bingo_configuracoes') || '{"numeroInicial": 1, "numeroFinal": 75, "precoCartela": 5.00}');
        numerosSorteados = JSON.parse(localStorage.getItem('numeros_sorteados') || '[]');
        cartelas = JSON.parse(localStorage.getItem('bingo_cartelas_vendidas') || '[]');
        atualizarTodosDisplays();
        console.log('üìÇ Dados carregados do localStorage');
    }

    function atualizarTodosDisplays() {
        atualizarDisplay();
        atualizarRangeAtual();
        atualizarEstatisticasCartelas();
        // Usar a vers√£o n√£o ass√≠ncrona para compatibilidade, a robusta ser√° chamada quando necess√°rio
        atualizarHistoricoBasico();
    }
    
    // Vers√£o b√°sica para compatibilidade
    function atualizarHistoricoBasico() {
        if (!historicoContainer) return;
        
        if (numerosSorteados.length === 0) {
            historicoContainer.innerHTML = '<p class="sem-historico">Nenhum n√∫mero sorteado ainda</p>';
        } else {
            const numerosHtml = numerosSorteados.map(num => 
                `<span class="numero-sorteado" style="
                    display: inline-block;
                    background: linear-gradient(135deg, #28a745, #20c997);
                    color: white;
                    padding: 8px 12px;
                    margin: 4px;
                    border-radius: 50%;
                    font-weight: bold;
                    font-size: 16px;
                    min-width: 40px;
                    text-align: center;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                ">${num}</span>`
            ).join('');
            
            historicoContainer.innerHTML = `
                <div style="margin-bottom: 10px;">
                    <strong>Total: ${numerosSorteados.length} n√∫meros</strong>
                </div>
                <div style="max-height: 300px; overflow-y: auto; padding: 10px; border: 1px solid #ddd; border-radius: 5px; background: #f9f9f9;">
                    ${numerosHtml}
                </div>
            `;
        }
    }

    function atualizarDisplay() {
        if (!numeroInicialInput || !numeroFinalInput) return;
        
        const inicial = parseInt(numeroInicialInput.value) || 1;
        const final = parseInt(numeroFinalInput.value) || 75;
        const total = final - inicial + 1;
        const restantes = total - numerosSorteados.length;

        if (totalNumerosSpan) totalNumerosSpan.textContent = `Total de n√∫meros: ${total}`;
        if (numerosRestantesSpan) numerosRestantesSpan.textContent = restantes;
        if (numerosSorteadosCountSpan) numerosSorteadosCountSpan.textContent = numerosSorteados.length;
    }

    function atualizarRangeAtual() {
        if (configuracoes && rangeAtualSpan) {
            rangeAtualSpan.textContent = `${configuracoes.numeroInicial || 1} - ${configuracoes.numeroFinal || 75}`;
        }
    }

    function atualizarHistorico() {
        console.log('üîÑ [ADMIN] Atualizando hist√≥rico...');
        console.log('üìä [ADMIN] numerosSorteados:', numerosSorteados);
        console.log('üìä [ADMIN] historicoContainer:', !!historicoContainer);
        
        if (!historicoContainer) {
            console.error('‚ùå [ADMIN] historicoContainer n√£o encontrado!');
            return;
        }
        
        if (numerosSorteados.length === 0) {
            console.log('üìù [ADMIN] Nenhum n√∫mero sorteado, exibindo mensagem padr√£o');
            historicoContainer.innerHTML = '<p class="sem-historico">Nenhum n√∫mero sorteado ainda</p>';
        } else {
            console.log(`üé≤ [ADMIN] Exibindo ${numerosSorteados.length} n√∫meros sorteados`);
            
            const numerosHtml = numerosSorteados.map(num => 
                `<span class="numero-sorteado" style="
                    display: inline-block;
                    background: linear-gradient(135deg, #28a745, #20c997);
                    color: white;
                    padding: 8px 12px;
                    margin: 4px;
                    border-radius: 50%;
                    font-weight: bold;
                    font-size: 16px;
                    min-width: 40px;
                    text-align: center;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                ">${num}</span>`
            ).join('');
            
            historicoContainer.innerHTML = `
                <div style="margin-bottom: 10px;">
                    <strong>Total: ${numerosSorteados.length} n√∫meros</strong>
                </div>
                <div style="max-height: 300px; overflow-y: auto; padding: 10px; border: 1px solid #ddd; border-radius: 5px; background: #f9f9f9;">
                    ${numerosHtml}
                </div>
            `;
            
            console.log('‚úÖ [ADMIN] Hist√≥rico atualizado com sucesso');
        }
    }

    function atualizarEstatisticasCartelas() {
        const geradas = cartelas.length;
        const vendidas = cartelas.filter(c => c.vendida).length;
        const total = cartelas.filter(c => c.vendida).reduce((sum, c) => sum + (c.preco || 0), 0);

        if (cartelasGeradasSpan) cartelasGeradasSpan.textContent = geradas;
        if (cartelasVendidasSpan) cartelasVendidasSpan.textContent = vendidas;
        if (totalArrecadadoSpan) totalArrecadadoSpan.textContent = `R$ ${total.toFixed(2).replace('.', ',')}`;
    }

    // ===== FUN√á√ïES DOS BOT√ïES =====

    async function salvarConfiguracoes() {
        console.log('üíæ [ADMIN] Salvando configura√ß√µes...');
        
        if (!numeroInicialInput || !numeroFinalInput || !precoCartelaInput) {
            alert('Erro: Elementos de input n√£o encontrados');
            return;
        }
        
        try {
            const config = {
                numeroInicial: parseInt(numeroInicialInput.value),
                numeroFinal: parseInt(numeroFinalInput.value),
                precoCartela: parseFloat(precoCartelaInput.value),
                jogoAtivo: true
            };

            // Tentar salvar no Firebase
            if (sistemaInicializado && firebaseService && typeof firebaseService.salvarConfiguracoes === 'function') {
                await firebaseService.salvarConfiguracoes(config);
                console.log('‚úÖ [ADMIN] Configura√ß√µes salvas no Firebase');
            } else {
                console.warn('‚ö†Ô∏è [ADMIN] Firebase n√£o dispon√≠vel, salvando apenas localmente');
            }
            
            // Salvar tamb√©m localmente
            localStorage.setItem('bingo_configuracoes', JSON.stringify(config));
            configuracoes = config;
            
            atualizarTodosDisplays();
            alert('‚úÖ Configura√ß√µes salvas com sucesso!');
            console.log('‚úÖ [ADMIN] Configura√ß√µes salvas');
            
        } catch (error) {
            console.error('‚ùå Erro ao salvar configura√ß√µes:', error);
            alert('‚ùå Erro ao salvar configura√ß√µes: ' + error.message);
        }
    }

    async function resetarJogo() {
        if (!confirm('‚ö†Ô∏è ATEN√á√ÉO: Isso ir√° resetar TODOS os dados do jogo (n√∫meros sorteados, cartelas, etc.). Continuar?')) {
            return;
        }

        console.log('üîÑ [ADMIN] Resetando jogo...');
        
        try {
            // Tentar resetar no Firebase
            if (sistemaInicializado && firebaseService && typeof firebaseService.resetarJogo === 'function') {
                await firebaseService.resetarJogo();
                console.log('‚úÖ [ADMIN] Jogo resetado no Firebase');
            } else {
                console.warn('‚ö†Ô∏è [ADMIN] Firebase n√£o dispon√≠vel, resetando apenas dados locais');
            }
            
            // Limpar dados locais
            localStorage.removeItem('numeros_sorteados');
            localStorage.removeItem('bingo_cartelas_vendidas');
            
            numerosSorteados = [];
            cartelas = [];
            
            atualizarTodosDisplays();
            alert('‚úÖ Jogo resetado com sucesso!');
            console.log('‚úÖ [ADMIN] Jogo resetado');
            
        } catch (error) {
            console.error('‚ùå Erro ao resetar jogo:', error);
            alert('‚ùå Erro ao resetar jogo: ' + error.message);
        }
    }

    function limparHistorico() {
        if (!confirm('Deseja limpar o hist√≥rico de n√∫meros sorteados?')) {
            return;
        }

        numerosSorteados = [];
        localStorage.setItem('numeros_sorteados', JSON.stringify([]));
        atualizarHistorico();
        atualizarDisplay();
        alert('‚úÖ Hist√≥rico limpo!');
    }

    function irParaBingo() {
        window.open('index.html', '_blank');
    }

    async function gerarNovaCartela() {
        console.log('üé´ [ADMIN] Gerando nova cartela...');
        
        try {
            // Verificar se sistema est√° inicializado
            if (!sistemaInicializado || !firebaseService) {
                throw new Error('Sistema Firebase n√£o inicializado');
            }
            
            const preco = parseFloat(precoCartelaInput?.value || 5);
            const novaCartela = {
                id: Date.now().toString(),
                numeros: gerarNumerosCartela(),
                preco: preco,
                vendida: false,
                dataGeracao: new Date().toISOString()
            };

            console.log('üíæ [ADMIN] Salvando cartela no Firebase...');
            if (firebaseService && typeof firebaseService.salvarCartela === 'function') {
                await firebaseService.salvarCartela(novaCartela);
                console.log('‚úÖ [ADMIN] Cartela salva no Firebase');
            } else {
                console.warn('‚ö†Ô∏è [ADMIN] FirebaseService.salvarCartela n√£o dispon√≠vel, salvando apenas localmente');
            }
            
            cartelas.push(novaCartela);
            localStorage.setItem('bingo_cartelas_vendidas', JSON.stringify(cartelas));
            
            atualizarEstatisticasCartelas();
            alert(`‚úÖ Nova cartela gerada! ID: ${novaCartela.id}`);
            console.log('‚úÖ [ADMIN] Cartela gerada:', novaCartela.id);
            
        } catch (error) {
            console.error('‚ùå [ADMIN] Erro ao gerar cartela:', error);
            alert('‚ùå Erro ao gerar cartela: ' + error.message);
        }
    }

    function gerarNumerosCartela() {
        const numeros = [];
        const inicial = configuracoes.numeroInicial || 1;
        const final = configuracoes.numeroFinal || 75;
        
        while (numeros.length < 15) {
            const num = Math.floor(Math.random() * (final - inicial + 1)) + inicial;
            if (!numeros.includes(num)) {
                numeros.push(num);
            }
        }
        
        return numeros.sort((a, b) => a - b);
    }

    function verVendas() {
        if (!modalVendas || !listaCartelas) {
            alert('Erro: Modal de vendas n√£o encontrado');
            return;
        }
        
        console.log('üí∞ Abrindo modal de vendas...');
        
        const cartelasVendidas = cartelas.filter(c => c.vendida);
        
        if (cartelasVendidas.length === 0) {
            listaCartelas.innerHTML = '<p>Nenhuma cartela vendida ainda.</p>';
        } else {
            let html = '<div class="vendas-lista">';
            cartelasVendidas.forEach(cartela => {
                html += `
                    <div class="cartela-vendida">
                        <strong>ID: ${cartela.id}</strong><br>
                        Comprador: ${cartela.nomeComprador || 'N/A'}<br>
                        Telefone: ${cartela.telefone || 'N/A'}<br>
                        Pre√ßo: R$ ${(cartela.preco || 0).toFixed(2).replace('.', ',')}<br>
                        Data: ${cartela.dataVenda ? new Date(cartela.dataVenda).toLocaleString() : 'N/A'}
                    </div>
                `;
            });
            html += '</div>';
            listaCartelas.innerHTML = html;
        }
        
        modalVendas.style.display = 'block';
    }

    function updateUserInfo() {
        const adminUserSpan = document.getElementById('admin-user');
        const sessionTimeSpan = document.getElementById('session-time');
        
        if (window.bingoAuth && window.bingoAuth.isAuthenticated()) {
            const user = window.bingoAuth.currentUser;
            if (adminUserSpan) adminUserSpan.textContent = `üë§ ${user.username}`;
            
            const authTime = localStorage.getItem('admin_auth_time');
            if (authTime && sessionTimeSpan) {
                const loginTime = new Date(parseInt(authTime));
                sessionTimeSpan.textContent = `‚è∞ ${loginTime.toLocaleTimeString()}`;
            }
        }
    }

    function logout() {
        if (confirm('Deseja realmente sair do sistema?')) {
            window.bingoAuth.logout();
        }
    }

    // ===== CONFIGURAR EVENT LISTENERS =====
    console.log('üîß Configurando event listeners...');
    
    // Verificar se todos os bot√µes existem antes de adicionar listeners
    if (salvarConfigBtn) {
        salvarConfigBtn.addEventListener('click', salvarConfiguracoes);
        console.log('‚úÖ Event listener adicionado: salvar-config');
    } else {
        console.error('‚ùå Bot√£o salvar-config n√£o encontrado');
    }
    
    if (resetarJogoBtn) {
        resetarJogoBtn.addEventListener('click', resetarJogo);
        console.log('‚úÖ Event listener adicionado: resetar-jogo');
    } else {
        console.error('‚ùå Bot√£o resetar-jogo n√£o encontrado');
    }
    
    if (limparHistoricoBtn) {
        limparHistoricoBtn.addEventListener('click', limparHistorico);
        console.log('‚úÖ Event listener adicionado: limpar-historico');
    } else {
        console.error('‚ùå Bot√£o limpar-historico n√£o encontrado');
    }
    
    if (atualizarNumerosBtn) {
        atualizarNumerosBtn.addEventListener('click', atualizarNumerosSorteados);
        console.log('‚úÖ Event listener adicionado: atualizar-numeros');
    } else {
        console.error('‚ùå Bot√£o atualizar-numeros n√£o encontrado');
    }
    
    if (irParaBingoBtn) {
        irParaBingoBtn.addEventListener('click', irParaBingo);
        console.log('‚úÖ Event listener adicionado: ir-para-bingo');
    } else {
        console.error('‚ùå Bot√£o ir-para-bingo n√£o encontrado');
    }
    
    if (gerarCartelaBtn) {
        gerarCartelaBtn.addEventListener('click', gerarNovaCartela);
        console.log('‚úÖ Event listener adicionado: gerar-cartela');
    } else {
        console.error('‚ùå Bot√£o gerar-cartela n√£o encontrado');
    }
    
    if (verVendasBtn) {
        verVendasBtn.addEventListener('click', verVendas);
        console.log('‚úÖ Event listener adicionado: ver-vendas');
    } else {
        console.error('‚ùå Bot√£o ver-vendas n√£o encontrado');
    }

    // Atualizar total de n√∫meros quando os inputs mudarem
    if (numeroInicialInput) {
        numeroInicialInput.addEventListener('input', atualizarDisplay);
        console.log('‚úÖ Event listener adicionado: numero-inicial');
    }
    
    if (numeroFinalInput) {
        numeroFinalInput.addEventListener('input', atualizarDisplay);
        console.log('‚úÖ Event listener adicionado: numero-final');
    }

    // Fechar modal
    if (closeModal) {
        closeModal.addEventListener('click', () => {
            if (modalVendas) modalVendas.style.display = 'none';
        });
        console.log('‚úÖ Event listener adicionado: close-modal');
    }

    if (modalVendas) {
        window.addEventListener('click', (event) => {
            if (event.target === modalVendas) {
                modalVendas.style.display = 'none';
            }
        });
    }

    // Event listener para bot√£o de atualizar n√∫meros
    const btnAtualizarNumeros = document.getElementById('atualizar-numeros');
    if (btnAtualizarNumeros) {
        btnAtualizarNumeros.addEventListener('click', async () => {
            console.log('üîÑ [ADMIN] Bot√£o atualizar n√∫meros clicado');
            btnAtualizarNumeros.disabled = true;
            btnAtualizarNumeros.textContent = 'üîÑ Atualizando...';
            
            try {
                await atualizarHistoricoRobusta();
                console.log('‚úÖ [ADMIN] N√∫meros atualizados com sucesso');
            } catch (error) {
                console.error('‚ùå [ADMIN] Erro ao atualizar n√∫meros:', error);
                alert('Erro ao atualizar n√∫meros: ' + error.message);
            } finally {
                btnAtualizarNumeros.disabled = false;
                btnAtualizarNumeros.textContent = 'üîÑ Atualizar N√∫meros';
            }
        });
        console.log('‚úÖ Event listener adicionado: atualizar-numeros');
    } else {
        console.error('‚ùå Bot√£o atualizar-numeros n√£o encontrado');
    }

    // Event listener para bot√£o de diagn√≥stico
    const diagnosticarNumerosBtn = document.getElementById('diagnosticar-numeros');
    if (diagnosticarNumerosBtn) {
        diagnosticarNumerosBtn.addEventListener('click', async () => {
            console.log('üîç [ADMIN] Bot√£o diagnosticar clicado');
            diagnosticarNumerosBtn.disabled = true;
            diagnosticarNumerosBtn.textContent = 'üîç Diagnosticando...';
            
            try {
                await diagnosticarNumerosSorteados();
                alert('‚úÖ Diagn√≥stico conclu√≠do! Verifique o console (F12) para detalhes.');
            } catch (error) {
                console.error('‚ùå [ADMIN] Erro no diagn√≥stico:', error);
                alert('Erro no diagn√≥stico: ' + error.message);
            } finally {
                diagnosticarNumerosBtn.disabled = false;
                diagnosticarNumerosBtn.textContent = 'üîç Diagnosticar';
            }
        });
        console.log('‚úÖ Event listener adicionado: diagnosticar-numeros');
    } else {
        console.error('‚ùå Bot√£o diagnosticar-numeros n√£o encontrado');
    }

    // Tornar fun√ß√µes globais
    window.logout = logout;

    // CSS para anima√ß√£o de confete e melhorias visuais
    const style = document.createElement('style');
    style.textContent = `
        @keyframes confetti-fall {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(360deg);
                opacity: 0;
            }
        }
        
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: scale(0.8);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }
        
        .vendas-lista {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .cartela-vendida {
            border: 1px solid #ddd;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            background: #f9f9f9;
        }
        
        .numero-sorteado {
            transition: all 0.3s ease;
        }
        
        .numero-sorteado:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 8px rgba(0,0,0,0.3) !important;
        }
        
        .carregando {
            text-align: center;
            color: #6c757d;
            font-style: italic;
            padding: 20px;
        }
        
        .sem-historico {
            text-align: center;
            color: #6c757d;
            padding: 20px;
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            background: #f8f9fa;
        }
        
        .sem-historico p {
            margin: 5px 0;
        }
        
        .erro-historico {
            text-align: center;
        }
        
        .erro-historico button:hover {
            background: #c82333 !important;
        }
        
        .btn-secondary:hover {
            background: #5a6268 !important;
            transform: translateY(-1px);
        }
        
        .btn-info {
            background: #17a2b8;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            margin-left: 5px;
            transition: all 0.3s ease;
        }
        
        .btn-info:hover {
            background: #138496 !important;
            transform: translateY(-1px);
        }
        
        .btn-info:disabled {
            background: #6c757d !important;
            cursor: not-allowed;
            transform: none;
        }
        
        .historico-header {
            border-bottom: 1px solid #dee2e6;
            padding-bottom: 10px;
        }
        
        .numeros-container {
            position: relative;
        }
        
        .numeros-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #28a745, #20c997, #17a2b8, #28a745);
            border-radius: 8px 8px 0 0;
        }
    `;
    document.head.appendChild(style);

    // Carregar dados iniciais
    console.log('üìä Carregando dados iniciais...');
    await carregarDados();
    
    console.log('‚úÖ Admin panel totalmente carregado e configurado!');
}

// Fun√ß√£o de inicializa√ß√£o simples como fallback
async function initializeAdminSimple() {
    console.log('üîÑ [SIMPLE] Inicializa√ß√£o simples do admin...');
    
    // Inicializar Firebase b√°sico
    if (!firebase.apps.length) {
        if (typeof firebaseConfig !== 'undefined') {
            firebase.initializeApp(firebaseConfig);
        } else {
            throw new Error('firebaseConfig n√£o encontrado');
        }
    }
    
    // Configurar vari√°veis globais b√°sicas
    window.db = window.db || firebase.firestore();
    window.auth = window.auth || firebase.auth();
    
    // Pular autentica√ß√£o por enquanto para debug
    console.log('‚ö†Ô∏è [SIMPLE] Pulando autentica√ß√£o para debug');
    
    // Configurar bot√µes b√°sicos
    setupBasicButtons();
    
    console.log('‚úÖ [SIMPLE] Inicializa√ß√£o simples conclu√≠da');
}

// Configurar bot√µes b√°sicos
function setupBasicButtons() {
    console.log('üîÑ [SIMPLE] Configurando bot√µes b√°sicos...');
    
    // Bot√£o salvar configura√ß√µes
    const salvarConfigBtn = document.getElementById('salvar-config');
    if (salvarConfigBtn) {
        salvarConfigBtn.onclick = () => {
            console.log('üîÑ Bot√£o salvar config clicado');
            alert('Fun√ß√£o em desenvolvimento - modo debug');
        };
        console.log('‚úÖ Bot√£o salvar-config configurado');
    } else {
        console.error('‚ùå Bot√£o salvar-config n√£o encontrado');
    }
    
    // Bot√£o resetar jogo
    const resetarJogoBtn = document.getElementById('resetar-jogo');
    if (resetarJogoBtn) {
        resetarJogoBtn.onclick = () => {
            console.log('üîÑ Bot√£o resetar jogo clicado');
            alert('Fun√ß√£o em desenvolvimento - modo debug');
        };
        console.log('‚úÖ Bot√£o resetar-jogo configurado');
    } else {
        console.error('‚ùå Bot√£o resetar-jogo n√£o encontrado');
    }
    
    // Bot√£o ir para bingo
    const irParaBingoBtn = document.getElementById('ir-para-bingo');
    if (irParaBingoBtn) {
        irParaBingoBtn.onclick = () => {
            console.log('üîÑ Bot√£o ir para bingo clicado');
            window.location.href = 'index.html';
        };
        console.log('‚úÖ Bot√£o ir-para-bingo configurado');
    } else {
        console.error('‚ùå Bot√£o ir-para-bingo n√£o encontrado');
    }
    
    // Bot√£o gerar cartela
    const gerarCartelaBtn = document.getElementById('gerar-cartela');
    if (gerarCartelaBtn) {
        gerarCartelaBtn.onclick = () => {
            console.log('üîÑ Bot√£o gerar cartela clicado');
            alert('Fun√ß√£o em desenvolvimento - modo debug');
        };
        console.log('‚úÖ Bot√£o gerar-cartela configurado');
    } else {
        console.error('‚ùå Bot√£o gerar-cartela n√£o encontrado');
    }
    
    // Outros bot√µes...
    const verVendasBtn = document.getElementById('ver-vendas');
    if (verVendasBtn) {
        verVendasBtn.onclick = () => {
            console.log('üîÑ Bot√£o ver vendas clicado');
            alert('Fun√ß√£o em desenvolvimento - modo debug');
        };
        console.log('‚úÖ Bot√£o ver-vendas configurado');
    }
    
    console.log('‚úÖ [SIMPLE] Bot√µes b√°sicos configurados');
}

// Fun√ß√£o para buscar n√∫meros sorteados de forma alternativa
async function buscarNumerosSorteadosAlternativo() {
    try {
        console.log('üîç [ADMIN] Iniciando busca alternativa de n√∫meros sorteados...');
        
        if (!firebase || !firebase.firestore) {
            throw new Error('Firebase Firestore n√£o dispon√≠vel');
        }
        
        const db = firebase.firestore();
        
        // M√©todo 1: Tentar a cole√ß√£o padr√£o com orderBy
        try {
            console.log('üéØ [ADMIN] M√©todo 1: numeros-sorteados com orderBy...');
            const snapshot1 = await db.collection('numeros-sorteados').orderBy('dataSorteio', 'asc').get();
            console.log(`üìä [ADMIN] M√©todo 1: ${snapshot1.size} documentos encontrados`);
            
            if (snapshot1.size > 0) {
                const numeros = [];
                snapshot1.forEach(doc => {
                    const data = doc.data();
                    console.log(`üìÑ [ADMIN] Doc ${doc.id}:`, data);
                    if (data.numero !== undefined && data.numero !== null) {
                        numeros.push(data.numero);
                    }
                });
                
                if (numeros.length > 0) {
                    console.log('‚úÖ [ADMIN] M√©todo 1 sucesso:', numeros);
                    return numeros;
                }
            }
        } catch (err) {
            console.log('‚ö†Ô∏è [ADMIN] M√©todo 1 falhou:', err.message);
        }
        
        // M√©todo 2: Sem orderBy
        try {
            console.log('üéØ [ADMIN] M√©todo 2: numeros-sorteados sem orderBy...');
            const snapshot2 = await db.collection('numeros-sorteados').get();
            console.log(`üìä [ADMIN] M√©todo 2: ${snapshot2.size} documentos encontrados`);
            
            if (snapshot2.size > 0) {
                const numerosComData = [];
                snapshot2.forEach(doc => {
                    const data = doc.data();
                    console.log(`üìÑ [ADMIN] Doc ${doc.id}:`, data);
                    if (data.numero !== undefined && data.numero !== null) {
                        numerosComData.push({
                            numero: data.numero,
                            dataSorteio: data.dataSorteio || data.timestamp || new Date(0),
                            ordem: data.ordem || 0
                        });
                    }
                });
                
                if (numerosComData.length > 0) {
                    // Ordenar por data ou ordem
                    numerosComData.sort((a, b) => {
                        // Tentar ordenar por ordem primeiro
                        if (a.ordem !== b.ordem) {
                            return a.ordem - b.ordem;
                        }
                        // Sen√£o por data
                        const timeA = a.dataSorteio?.seconds || a.dataSorteio?.getTime?.() / 1000 || 0;
                        const timeB = b.dataSorteio?.seconds || b.dataSorteio?.getTime?.() / 1000 || 0;
                        return timeA - timeB;
                    });
                    
                    const numeros = numerosComData.map(item => item.numero);
                    console.log('‚úÖ [ADMIN] M√©todo 2 sucesso:', numeros);
                    return numeros;
                }
            }
        } catch (err) {
            console.log('‚ö†Ô∏è [ADMIN] M√©todo 2 falhou:', err.message);
        }
        
        // M√©todo 3: Outras cole√ß√µes
        const outrasColecoes = ['numerosSorteados', 'sorteio', 'bingo-sorteio'];
        for (const colecao of outrasColecoes) {
            try {
                console.log(`üéØ [ADMIN] M√©todo 3: Testando cole√ß√£o "${colecao}"...`);
                const snapshot = await db.collection(colecao).get();
                console.log(`üìä [ADMIN] Cole√ß√£o "${colecao}": ${snapshot.size} documentos`);
                
                if (snapshot.size > 0) {
                    const numeros = [];
                    snapshot.forEach(doc => {
                        const data = doc.data();
                        console.log(`üìÑ [ADMIN] ${colecao}/${doc.id}:`, data);
                        
                        // Se √© um array de n√∫meros
                        if (Array.isArray(data.numerosSorteados)) {
                            numeros.push(...data.numerosSorteados);
                        } else if (data.numero !== undefined) {
                            numeros.push(data.numero);
                        }
                    });
                    
                    if (numeros.length > 0) {
                        console.log(`‚úÖ [ADMIN] M√©todo 3 sucesso em "${colecao}":`, numeros);
                        return numeros;
                    }
                }
            } catch (err) {
                console.log(`‚ö†Ô∏è [ADMIN] Erro na cole√ß√£o "${colecao}":`, err.message);
            }
        }
        
        console.log('‚ùå [ADMIN] Nenhum n√∫mero encontrado em busca alternativa');
        return [];
        
    } catch (error) {
        console.error('‚ùå [ADMIN] Erro na busca alternativa:', error);
        return [];
    }
}

// Fun√ß√£o para for√ßar atualiza√ß√£o dos n√∫meros sorteados
async function atualizarNumerosSorteados() {
    console.log('üîÑ [ADMIN] For√ßando atualiza√ß√£o de n√∫meros sorteados...');
    
    try {
        // Limpar cache atual
        numerosSorteados = [];
        
        // Tentar carregar do Firebase Service primeiro
        if (sistemaInicializado && firebaseService) {
            console.log('üîç [ADMIN] Tentando carregar via Firebase Service...');
            const numerosFirebase = await firebaseService.carregarNumerosSorteados();
            if (numerosFirebase && numerosFirebase.length > 0) {
                numerosSorteados = numerosFirebase;
                console.log('‚úÖ [ADMIN] N√∫meros carregados via Firebase Service:', numerosSorteados);
            } else {
                console.log('‚ö†Ô∏è [ADMIN] Firebase Service n√£o retornou n√∫meros, tentando busca alternativa...');
            }
        }
        
        // Se ainda n√£o temos n√∫meros, tentar busca alternativa
        if (numerosSorteados.length === 0) {
            console.log('üîç [ADMIN] Executando busca alternativa...');
            const numerosAlternativos = await buscarNumerosSorteadosAlternativo();
            if (numerosAlternativos.length > 0) {
                numerosSorteados = numerosAlternativos;
                console.log('‚úÖ [ADMIN] N√∫meros encontrados via busca alternativa:', numerosSorteados);
            }
        }
        
        // Atualizar display
        atualizarHistorico();
        atualizarDisplay();
        
        if (numerosSorteados.length > 0) {
            alert(`‚úÖ Atualiza√ß√£o conclu√≠da! ${numerosSorteados.length} n√∫meros sorteados encontrados.`);
        } else {
            alert('‚ö†Ô∏è Nenhum n√∫mero sorteado encontrado no Firebase.');
        }
        
    } catch (error) {
        console.error('‚ùå [ADMIN] Erro ao atualizar n√∫meros:', error);
        alert('‚ùå Erro ao atualizar n√∫meros: ' + error.message);
    }
}

// Fun√ß√£o para atualizar hist√≥rico com busca robusta
async function atualizarHistoricoRobusta() {
    console.log('üîÑ [ADMIN] Atualizando hist√≥rico robusto...');
    
    if (!historicoContainer) {
        console.error('‚ùå [ADMIN] historicoContainer n√£o encontrado!');
        return;
    }
    
    // Mostrar indicador de carregamento
    historicoContainer.innerHTML = '<p class="carregando">üîÑ Carregando n√∫meros sorteados...</p>';
    
    try {
        // Buscar n√∫meros de forma robusta
        const numerosEncontrados = await buscarNumerosSorteadosRobusta();
        
        if (numerosEncontrados.length === 0) {
            console.log('üìù [ADMIN] Nenhum n√∫mero encontrado, exibindo mensagem padr√£o');
            historicoContainer.innerHTML = `
                <div class="sem-historico">
                    <p>Nenhum n√∫mero sorteado ainda</p>
                    <p><small>Os n√∫meros aparecer√£o aqui quando o sorteio come√ßar</small></p>
                </div>
            `;
        } else {
            console.log(`üé≤ [ADMIN] Exibindo ${numerosEncontrados.length} n√∫meros sorteados:`, numerosEncontrados);
            
            // Atualizar vari√°vel global
            numerosSorteados = numerosEncontrados;
            
            // Salvar no localStorage para cache
            localStorage.setItem('numeros_sorteados', JSON.stringify(numerosEncontrados));
            
            const numerosHtml = numerosEncontrados.map((num, index) => 
                `<span class="numero-sorteado" style="
                    display: inline-block;
                    background: linear-gradient(135deg, #28a745, #20c997);
                    color: white;
                    padding: 8px 12px;
                    margin: 4px;
                    border-radius: 50%;
                    font-weight: bold;
                    font-size: 16px;
                    min-width: 40px;
                    text-align: center;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                    animation: fadeIn 0.3s ease-in-out ${index * 0.1}s both;
                " title="N√∫mero ${num} - Posi√ß√£o ${index + 1}">${num}</span>`
            ).join('');
            
            historicoContainer.innerHTML = `
                <div class="historico-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <div>
                        <strong style="color: #28a745;">‚úÖ ${numerosEncontrados.length} n√∫meros sorteados</strong>
                        <span style="color: #6c757d; margin-left: 10px;">√öltima atualiza√ß√£o: ${new Date().toLocaleTimeString()}</span>
                    </div>
                    <button id="atualizar-historico-btn" class="btn-secondary" style="
                        background: #6c757d;
                        color: white;
                        border: none;
                        padding: 6px 12px;
                        border-radius: 4px;
                        cursor: pointer;
                        font-size: 12px;
                    ">üîÑ Atualizar</button>
                </div>
                <div class="numeros-container" style="
                    max-height: 300px; 
                    overflow-y: auto; 
                    padding: 15px; 
                    border: 2px solid #28a745; 
                    border-radius: 8px; 
                    background: linear-gradient(135deg, #f8f9fa, #e9ecef);
                    box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
                ">
                    ${numerosHtml}
                </div>
            `;
            
            // Adicionar event listener para o bot√£o de atualizar
            const atualizarBtn = document.getElementById('atualizar-historico-btn');
            if (atualizarBtn) {
                atualizarBtn.addEventListener('click', async () => {
                    console.log('üîÑ [ADMIN] Bot√£o atualizar clicado');
                    atualizarBtn.disabled = true;
                    atualizarBtn.textContent = 'üîÑ Atualizando...';
                    
                    try {
                        await atualizarHistoricoRobusta();
                    } finally {
                        atualizarBtn.disabled = false;
                        atualizarBtn.textContent = 'üîÑ Atualizar';
                    }
                });
            }
            
            console.log('‚úÖ [ADMIN] Hist√≥rico robusto atualizado com sucesso');
        }
        
        // Atualizar outros displays tamb√©m
        atualizarDisplay();
        
    } catch (error) {
        console.error('‚ùå [ADMIN] Erro ao atualizar hist√≥rico robusto:', error);
        historicoContainer.innerHTML = `
            <div class="erro-historico" style="color: #dc3545; padding: 15px; border: 1px solid #dc3545; border-radius: 4px; background: #f8d7da;">
                <p><strong>‚ùå Erro ao carregar n√∫meros sorteados</strong></p>
                <p><small>${error.message}</small></p>
                <button onclick="location.reload()" style="margin-top: 10px; padding: 5px 10px; background: #dc3545; color: white; border: none; border-radius: 3px; cursor: pointer;">
                    üîÑ Recarregar P√°gina
                </button>
            </div>
        `;
    }
}

// Fun√ß√£o para criar dados de demonstra√ß√£o (apenas para debug/teste)
function criarDadosDemo() {
    const numerosDemo = [5, 12, 23, 34, 45, 56, 67, 73];
    localStorage.setItem('numeros_sorteados', JSON.stringify(numerosDemo));
    localStorage.setItem('bingo_demo_numbers', JSON.stringify(numerosDemo));
    console.log('üìù [DEBUG] Dados demo criados:', numerosDemo);
    return numerosDemo;
}

// Fun√ß√£o para diagnosticar estado dos n√∫meros sorteados
async function diagnosticarNumerosSorteados() {
    console.log('üîç [ADMIN] === DIAGN√ìSTICO DE N√öMEROS SORTEADOS ===');
    
    // 1. Verificar localStorage
    const numerosLocais = JSON.parse(localStorage.getItem('numeros_sorteados') || '[]');
    console.log('üìÇ [ADMIN] localStorage numeros_sorteados:', numerosLocais);
    
    const numerosDemo = JSON.parse(localStorage.getItem('bingo_demo_numbers') || '[]');
    console.log('üìÇ [ADMIN] localStorage bingo_demo_numbers:', numerosDemo);
    
    // 2. Verificar Firebase Service
    if (sistemaInicializado && firebaseService) {
        try {
            const numerosFirebase = await firebaseService.carregarNumerosSorteados();
            console.log('üî• [ADMIN] Firebase Service retornou:', numerosFirebase);
        } catch (error) {
            console.log('‚ùå [ADMIN] Firebase Service falhou:', error.message);
        }
    }
    
    // 3. Verificar Firestore diretamente
    if (typeof firebase !== 'undefined' && firebase.firestore) {
        try {
            const db = firebase.firestore();
            const snapshot = await db.collection('numeros-sorteados').get();
            console.log(`üî• [ADMIN] Firestore direto: ${snapshot.size} documentos`);
            
            snapshot.forEach(doc => {
                console.log(`üìÑ [ADMIN] Doc ${doc.id}:`, doc.data());
            });
        } catch (error) {
            console.log('‚ùå [ADMIN] Firestore direto falhou:', error.message);
        }
    }
    
    // 4. Estado atual da vari√°vel
    console.log('üî¢ [ADMIN] Vari√°vel numerosSorteados atual:', numerosSorteados);
    
    console.log('üîç [ADMIN] === FIM DO DIAGN√ìSTICO ===');
}

// Tornar fun√ß√µes dispon√≠veis globalmente para debug
window.criarDadosDemo = criarDadosDemo;
window.diagnosticarNumerosSorteados = diagnosticarNumerosSorteados;
window.atualizarHistoricoRobusta = atualizarHistoricoRobusta;
window.buscarNumerosSorteadosRobusta = buscarNumerosSorteadosRobusta;

// Carregar dados iniciais
console.log('üìä Carregando dados iniciais...');
await carregarDados();
    
console.log('‚úÖ Admin panel totalmente carregado e configurado!');
