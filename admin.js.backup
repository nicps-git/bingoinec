document.addEventListener('DOMContentLoaded', async () => {
    // ===== VERIFICA√á√ÉO DE AUTENTICA√á√ÉO =====
    if (!window.bingoAuth || !window.bingoAuth.isAuthenticated()) {
        alert('Acesso n√£o autorizado! Voc√™ ser√° redirecionado para a p√°gina de login.');
        window.location.href = 'login.html';
        return;
    }
    
    updateUserInfo();
    
    // ===== ELEMENTOS DO DOM =====
    const numeroInicialInput = document.getElementById('numero-inicial');
    const numeroFinalInput = document.getElementById('numero-final');
    const totalNumerosSpan = document.getElementById('total-numeros');
    const rangeAtualSpan = document.getElementById('range-atual');
    const numerosSorteadosCountSpan = document.getElementById('numeros-sorteados-count');
    const numerosRestantesSpan = document.getElementById('numeros-restantes');
    const historicoContainer = document.getElementById('historico-numeros');
    
    const salvarConfigBtn = document.getElementById('salvar-config');
    const resetarJogoBtn = document.getElementById('resetar-jogo');
    const irParaBingoBtn = document.getElementById('ir-para-bingo');
    const limparHistoricoBtn = document.getElementById('limpar-historico');

    // Elementos do sistema de cartelas
    const precoCartelaInput = document.getElementById('preco-cartela');
    const gerarCartelaBtn = document.getElementById('gerar-cartela');
    const verVendasBtn = document.getElementById('ver-vendas');
    const cartelasGeradasSpan = document.getElementById('cartelas-geradas');
    const cartelasVendidasSpan = document.getElementById('cartelas-vendidas');
    const totalArrecadadoSpan = document.getElementById('total-arrecadado');
    const modalVendas = document.getElementById('modal-vendas');
    const listaCartelas = document.getElementById('lista-cartelas');
    const closeModal = document.querySelector('.close');

    let configuracoes = {};
    let numerosSorteados = [];
    let cartelas = [];

    // Aguardar FirebaseService estar dispon√≠vel
    console.log('üî• Aguardando Firebase estar pronto...');
    
    try {
        // Usar nova fun√ß√£o de aguardar Firebase
        const service = await window.waitForFirebase(15000); // 15 segundos timeout
        window.firebaseService = service;
        console.log('‚úÖ Firebase pronto para uso!');
        
    } catch (error) {
        console.error('‚ùå Erro ao aguardar Firebase:', error);
        alert('‚ùå Erro ao carregar sistema Firebase. Verifique sua conex√£o com a internet e recarregue a p√°gina.');
        return;
    }
    
    // Verificar conex√£o com Firebase
    console.log('üî• Verificando conex√£o com Firebase...');
    try {
        const conexaoOk = await window.firebaseService.verificarConexao();
        if (!conexaoOk) {
            console.warn('‚ö†Ô∏è Problema de conex√£o com Firebase - modo offline');
            // N√£o bloquear a interface, continuar com dados locais
        } else {
            console.log('‚úÖ Conex√£o com Firebase OK');
        }
    } catch (error) {
        console.error('‚ùå Erro ao verificar conex√£o:', error);
        console.warn('‚ö†Ô∏è Continuando em modo offline');
    }

    // ===== FUN√á√ïES PRINCIPAIS =====

    // Carregar dados do Firebase
    async function carregarDados() {
        try {
            configuracoes = await window.firebaseService.carregarConfiguracoes();
            numerosSorteados = await window.firebaseService.carregarNumerosSorteados();
            cartelas = await window.firebaseService.carregarCartelas();

            // Tamb√©m verificar localStorage como fallback
            const cartelasLocais = JSON.parse(localStorage.getItem('bingo_cartelas_vendidas') || '[]');
            if (cartelasLocais.length > 0) {
                console.log(`üì¶ Encontradas ${cartelasLocais.length} cartelas no localStorage`);
                
                // Adicionar cartelas locais que n√£o est√£o no Firebase
                cartelasLocais.forEach(cartelaLocal => {
                    const jaExiste = cartelas.find(c => c.id === cartelaLocal.id);
                    if (!jaExiste) {
                        cartelas.push(cartelaLocal);
                        console.log(`üìé Cartela local adicionada: ${cartelaLocal.id}`);
                    }
                });
            }

            numeroInicialInput.value = configuracoes.numeroInicial || 1;
            numeroFinalInput.value = configuracoes.numeroFinal || 75;
            precoCartelaInput.value = configuracoes.precoCartela || 5.00;

            atualizarDisplay();
            atualizarEstatisticasCartelas();
            
            console.log(`‚úÖ Dados carregados - Firebase: ${cartelas.length - cartelasLocais.length}, Local: ${cartelasLocais.length}`);
        } catch (error) {
            console.error('‚ùå Erro ao carregar dados:', error);
            
            // Fallback completo para localStorage
            console.log('üîÑ Tentando carregar apenas do localStorage...');
            try {
                const cartelasLocais = JSON.parse(localStorage.getItem('bingo_cartelas_vendidas') || '[]');
                cartelas = cartelasLocais;
                
                const configLocais = JSON.parse(localStorage.getItem('bingo_configuracoes') || '{}');
                configuracoes = {
                    numeroInicial: configLocais.numeroInicial || 1,
                    numeroFinal: configLocais.numeroFinal || 75,
                    precoCartela: configLocais.precoCartela || 5.00
                };
                
                numeroInicialInput.value = configuracoes.numeroInicial;
                numeroFinalInput.value = configuracoes.numeroFinal;
                precoCartelaInput.value = configuracoes.precoCartela;
                
                atualizarDisplay();
                atualizarEstatisticasCartelas();
                
                console.log('‚úÖ Dados carregados do localStorage como fallback');
            } catch (localError) {
                console.error('‚ùå Erro ao carregar do localStorage:', localError);
                alert('Erro ao carregar dados. Tente recarregar a p√°gina.');
            }
        }
    }

    // Calcular total de n√∫meros
    function calcularTotalNumeros() {
        const inicial = parseInt(numeroInicialInput.value) || 1;
        const final = parseInt(numeroFinalInput.value) || 75;
        
        if (inicial > final) return 0;
        return final - inicial + 1;
    }

    // Atualizar display principal
    function atualizarDisplay() {
        const inicial = parseInt(numeroInicialInput.value) || 1;
        const final = parseInt(numeroFinalInput.value) || 75;
        const total = calcularTotalNumeros();
        
        totalNumerosSpan.textContent = `Total de n√∫meros: ${total}`;
        rangeAtualSpan.textContent = `${inicial} - ${final}`;
        numerosSorteadosCountSpan.textContent = numerosSorteados.length;
        numerosRestantesSpan.textContent = total - numerosSorteados.length;
        
        carregarHistorico();
    }

    // Carregar hist√≥rico de n√∫meros sorteados
    function carregarHistorico() {
        historicoContainer.innerHTML = '';
        
        if (numerosSorteados.length === 0) {
            historicoContainer.innerHTML = '<p class="sem-historico">Nenhum n√∫mero sorteado ainda</p>';
        } else {
            numerosSorteados.forEach(numero => {
                const numeroEl = document.createElement('div');
                numeroEl.className = 'numero-historico';
                numeroEl.textContent = numero;
                historicoContainer.appendChild(numeroEl);
            });
        }
    }

    // Validar inputs
    function validarInputs() {
        const inicial = parseInt(numeroInicialInput.value);
        const final = parseInt(numeroFinalInput.value);
        
        if (isNaN(inicial) || isNaN(final)) {
            alert('‚ö†Ô∏è Por favor, insira n√∫meros v√°lidos!');
            return false;
        }
        
        if (inicial < 1 || final < 1) {
            alert('‚ö†Ô∏è Os n√∫meros devem ser maiores que 0!');
            return false;
        }
        
        if (inicial > final) {
            alert('‚ö†Ô∏è O n√∫mero inicial deve ser menor ou igual ao n√∫mero final!');
            return false;
        }
        
        if (final - inicial + 1 > 999) {
            alert('‚ö†Ô∏è O range n√£o pode ter mais de 999 n√∫meros!');
            return false;
        }
        
        return true;
    }

    // Salvar configura√ß√µes
    async function salvarConfiguracoes() {
        if (!validarInputs()) return;
        
        try {
            const inicial = parseInt(numeroInicialInput.value);
            const final = parseInt(numeroFinalInput.value);
            const preco = parseFloat(precoCartelaInput.value) || 5.00;
            
            await window.firebaseService.salvarConfiguracoes({
                numeroInicial: inicial,
                numeroFinal: final,
                precoCartela: preco,
                jogoAtivo: true
            });
            
            configuracoes = {
                numeroInicial: inicial,
                numeroFinal: final,
                precoCartela: preco,
                jogoAtivo: true
            };
            
            // Feedback visual
            salvarConfigBtn.textContent = '‚úÖ Salvo!';
            salvarConfigBtn.style.background = 'linear-gradient(135deg, #4CAF50, #45a049)';
            
            setTimeout(() => {
                salvarConfigBtn.textContent = 'üíæ Salvar Configura√ß√µes';
                salvarConfigBtn.style.background = '';
            }, 2000);
            
            atualizarDisplay();
            criarConfeteSucesso();
            alert('üéâ Configura√ß√µes salvas com sucesso!');
            
        } catch (error) {
            console.error('‚ùå Erro ao salvar configura√ß√µes:', error);
            alert('‚ùå Erro ao salvar configura√ß√µes. Tente novamente.');
        }
    }

    // Resetar jogo
    async function resetarJogo() {
        if (confirm('üîÑ Tem certeza que deseja resetar o jogo? Isso apagar√° todo o hist√≥rico de n√∫meros sorteados.')) {
            try {
                await window.firebaseService.resetarJogo();
                numerosSorteados = [];
                carregarHistorico();
                atualizarDisplay();
                alert('üéÆ Jogo resetado com sucesso!');
            } catch (error) {
                console.error('‚ùå Erro ao resetar jogo:', error);
                alert('‚ùå Erro ao resetar jogo. Tente novamente.');
            }
        }
    }

    // Limpar hist√≥rico
    async function limparHistorico() {
        if (confirm('üóëÔ∏è Tem certeza que deseja limpar o hist√≥rico de n√∫meros sorteados?')) {
            try {
                await window.firebaseService.resetarJogo();
                numerosSorteados = [];
                carregarHistorico();
                atualizarDisplay();
                alert('üóëÔ∏è Hist√≥rico limpo com sucesso!');
            } catch (error) {
                console.error('‚ùå Erro ao limpar hist√≥rico:', error);
                alert('‚ùå Erro ao limpar hist√≥rico. Tente novamente.');
            }
        }
    }

    // Ir para bingo
    function irParaBingo() {
        window.location.href = 'index.html';
    }

    // Atualizar estat√≠sticas das cartelas
    function atualizarEstatisticasCartelas() {
        const cartelasGeradas = cartelas.length;
        const cartelasVendidas = cartelas.filter(c => c.vendida).length;
        const totalArrecadado = cartelas.filter(c => c.vendida).reduce((sum, c) => sum + (c.preco || 0), 0);

        cartelasGeradasSpan.textContent = cartelasGeradas;
        cartelasVendidasSpan.textContent = cartelasVendidas;
        totalArrecadadoSpan.textContent = `R$ ${totalArrecadado.toFixed(2)}`;
    }

    // Gerar nova cartela
    async function gerarNovaCartela() {
        try {
            const inicial = configuracoes.numeroInicial || 1;
            const final = configuracoes.numeroFinal || 75;
            const preco = configuracoes.precoCartela || 5.00;

            // Gerar n√∫meros da cartela
            const numeros = [];
            while (numeros.length < 24) {
                const numero = Math.floor(Math.random() * (final - inicial + 1)) + inicial;
                if (!numeros.includes(numero)) {
                    numeros.push(numero);
                }
            }
            numeros.sort((a, b) => a - b);

            const cartela = {
                id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
                numeros: numeros,
                preco: preco,
                vendida: false,
                dataGeracao: new Date().toISOString()
            };

            await window.firebaseService.salvarCartela(cartela);
            cartelas.push(cartela);
            atualizarEstatisticasCartelas();

            alert(`üé´ Nova cartela gerada!\nID: ${cartela.id}\nN√∫meros: ${numeros.join(', ')}`);
        } catch (error) {
            console.error('‚ùå Erro ao gerar cartela:', error);
            alert('‚ùå Erro ao gerar cartela. Tente novamente.');
        }
    }

    // Ver vendas
    function verVendas() {
        const cartelasVendidas = cartelas.filter(c => c.vendida);
        
        if (cartelasVendidas.length === 0) {
            alert('üìã Nenhuma cartela vendida ainda.');
            return;
        }

        let html = '<div class="lista-vendas">';
        cartelasVendidas.forEach((cartela, index) => {
            // Verificar se cartela tem dados v√°lidos
            const numerosCartela = Array.isArray(cartela.numeros) ? cartela.numeros : [];
            const dataVenda = cartela.dataVenda || cartela.timestamp || cartela.dataReferencia;
            const dataFormatada = dataVenda ? new Date(dataVenda).toLocaleString() : 'Data n√£o informada';
            
            html += `
                <div class="venda-item">
                    <h4>Cartela #${index + 1}</h4>
                    <p><strong>ID:</strong> ${cartela.id || 'N√£o informado'}</p>
                    <p><strong>Comprador:</strong> ${cartela.comprador || 'N√£o informado'}</p>
                    <p><strong>Telefone:</strong> ${cartela.telefone || 'N√£o informado'}</p>
                    <p><strong>Email:</strong> ${cartela.email || 'N√£o informado'}</p>
                    <p><strong>Pre√ßo:</strong> R$ ${(cartela.preco || 0).toFixed(2)}</p>
                    <p><strong>Data:</strong> ${dataFormatada}</p>
                    <div class="cartela-numeros">
                        <strong>N√∫meros da Cartela:</strong>
                        <div class="numeros-grid">
                            ${numerosCartela.map(num => `<span class="numero-cartela">${num}</span>`).join('')}
                        </div>
                    </div>
                </div>
            `;
        });
        html += '</div>';

        listaCartelas.innerHTML = html;
        modalVendas.style.display = 'block';
    }

    // Criar confete de sucesso
    function criarConfeteSucesso() {
        const elementos = ['üéâ', 'üéä', '‚ú®', 'üéà', 'üåü', '‚≠ê'];
        
        for (let i = 0; i < 30; i++) {
            setTimeout(() => {
                const confete = document.createElement('div');
                confete.textContent = elementos[Math.floor(Math.random() * elementos.length)];
                confete.style.cssText = `
                    position: fixed;
                    left: ${Math.random() * 100}vw;
                    top: -10px;
                    font-size: ${Math.random() * 20 + 20}px;
                    z-index: 9999;
                    pointer-events: none;
                    animation: confetti-fall 3s ease-out forwards;
                `;
                document.body.appendChild(confete);
                
                setTimeout(() => confete.remove(), 3000);
            }, i * 100);
        }
    }

    // Fun√ß√£o para informa√ß√µes do usu√°rio
    function updateUserInfo() {
        const userInfoEl = document.getElementById('user-info');
        if (userInfoEl && window.bingoAuth) {
            const user = window.bingoAuth.getCurrentUser();
            userInfoEl.innerHTML = `
                <span>üë§ ${user.email}</span>
                <button onclick="logout()" class="logout-btn">üö™ Sair</button>
            `;
        }
    }

    // Logout
    function logout() {
        if (confirm('Deseja realmente sair do sistema?')) {
            window.bingoAuth.logout();
            window.location.href = 'login.html';
        }
    }

    // ===== EVENT LISTENERS =====
    salvarConfigBtn.addEventListener('click', salvarConfiguracoes);
    resetarJogoBtn.addEventListener('click', resetarJogo);
    limparHistoricoBtn.addEventListener('click', limparHistorico);
    irParaBingoBtn.addEventListener('click', irParaBingo);
    gerarCartelaBtn.addEventListener('click', gerarNovaCartela);
    verVendasBtn.addEventListener('click', verVendas);

    // Atualizar total de n√∫meros quando os inputs mudarem
    numeroInicialInput.addEventListener('input', atualizarDisplay);
    numeroFinalInput.addEventListener('input', atualizarDisplay);

    // Fechar modal
    closeModal.addEventListener('click', () => {
        modalVendas.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
        if (event.target === modalVendas) {
            modalVendas.style.display = 'none';
        }
    });

    // Tornar fun√ß√µes globais
    window.logout = logout;

    // CSS para anima√ß√£o de confete
    const style = document.createElement('style');
    style.textContent = `
        @keyframes confetti-fall {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(360deg);
                opacity: 0;
            }
        }
    `;
    document.head.appendChild(style);

    // Carregar dados iniciais
    await carregarDados();
    
    console.log('‚úÖ Admin panel carregado com Firebase');
});
